<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kotlin | Shiraji's Blog]]></title>
  <link href="http://shiraji.github.io/blog/categories/kotlin/atom.xml" rel="self"/>
  <link href="http://shiraji.github.io/"/>
  <updated>2018-03-17T21:28:32+09:00</updated>
  <id>http://shiraji.github.io/</id>
  <author>
    <name><![CDATA[Shiraji]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Kontribute (V3) - Recommended Way]]></title>
    <link href="http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-recommend/"/>
    <updated>2018-03-17T00:00:03+09:00</updated>
    <id>http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-recommend</id>
    <content type="html"><![CDATA[<p>This blog post describes how to start Kontribute or how to start contributing <a href="https://kotlinlang.org/">Kotlin</a>.</p>

<ul>
<li><a href="http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-setup/">Setup</a></li>
<li><a href="http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-communication/">Communication</a></li>
<li><a href="http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-recommend/">1st Recommended Ways to Kontribute</a> &lt;- <strong>Now</strong></li>
<li>Developing/Testing Kotlin plugin</li>
</ul>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>OK, now let&rsquo;s actually work with project. There are 2 recommended ways for 1st commit of Kotlin.</p>

<ul>
<li>Adding documentation or comment</li>
<li>Providing sample codes</li>
</ul>


<h3>Adding documentations or comment</h3>

<p>Adding documentation or comment is one of best ways to start contribute any OSS including Kotlin. My first commit is also <a href="https://github.com/JetBrains/kotlin/commit/68dd3dde59b0a339819407cfdf0c465809092e75">fixing URL of README</a></p>

<p>JetBrains says that they want the documentation for standard library. Find a class or a function which are not documented well from <a href="https://kotlinlang.org/api/latest/jvm/stdlib/index.html">https://kotlinlang.org/api/latest/jvm/stdlib/index.html</a> You may think there are not much function that is not documented. Trust me, you can find at least 10 undocumented functions within 1 min!</p>

<h3>Providing sample codes</h3>

<p>If you are not good English writer like me, then providing samples are the better way to start contributing Kotlin. <a href="https://youtrack.jetbrains.com/issue/KT-20357">https://youtrack.jetbrains.com/issue/KT-20357</a> is the issue for samples. This issue is especially for new Kontributors.</p>

<p>There are 4 steps to provide sample codes</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/how-to-kontribute-v3.028.jpg" alt="samples-steps" /></p>

<p>Comment the target API to the issue</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/first_comment.png" alt="first_comment" /></p>

<p>Then, write sample code.</p>

<pre><code class="kotlin">@Sample
fun groupBy() {
}
</code></pre>

<p>The method name can be anything but don&rsquo;t add <code>test</code> as prefix/postfix because it is not test. Then add sample code inside the method.</p>

<pre><code class="kotlin">@Sample
fun groupBy() {
    val words = listOf("a", "abc", "ab", "def", "abcd")
    val byLength = words.groupBy { it.length }

    assertPrints(byLength.keys, "[1, 3, 2, 4]")
    assertPrints(byLength.values, "[[a], [abc, def], [ab], [abcd]]")

    val mutableByLength: MutableMap&lt;Int, MutableList&lt;String&gt;&gt; = words.groupByTo(mutableMapOf()) { it.length }
    // same content as in byLength map, but the map is mutable
    assertTrue(mutableByLength == byLength)
}
</code></pre>

<p>There are no hard restriction for writing samples. You can add comment if it is helpful for other developers.</p>

<p>After that, in order to connect with sample code and target method, comment to the target method with <code>@FQN of the sample method</code></p>

<pre><code class="kotlin">/**
...
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public inline fun &lt;T, K&gt; Iterable&lt;T&gt;.groupBy(keySelector: (T) -&gt; K): Map&lt;K, List&lt;T&gt;&gt; {
</code></pre>

<p>Now, you are ready. Send Pull Request. Then, update you comment with pull request URL</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/first_comment2.png" alt="first_comment2" /></p>

<p>That&rsquo;s it! Easy! Now, if you want to provide the sample code, please read README for sample code, too.
<a href="https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/samples/ReadMe.md">https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/samples/ReadMe.md</a></p>

<p>After the pull request get merged, in some point, you can see your sample code in official documentation <a href="http://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/group-by.html">http://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/group-by.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Kontribute (V3) - Communication]]></title>
    <link href="http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-communication/"/>
    <updated>2018-03-17T00:00:02+09:00</updated>
    <id>http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-communication</id>
    <content type="html"><![CDATA[<p>This blog post describes how to start Kontribute or how to start contributing <a href="https://kotlinlang.org/">Kotlin</a>.</p>

<ul>
<li><a href="http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-setup/">Setup</a></li>
<li><a href="http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-communication/">Communication</a> &lt;- <strong>Now</strong></li>
<li><a href="http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-recommend/">1st Recommended Ways to Kontribute</a></li>
<li>Developing/Testing Kotlin plugin</li>
</ul>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h2>Communication</h2>

<p>Communication is one of the key success factor for Kontribution.</p>

<p>I will introduce 3 tools that Kontributors usually use.</p>

<h3>Slack</h3>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/slack_rgb.png" width="250" style="border: none;" /></p>

<p>Slack is one of most important communication tool for Kontributors. In case you are not join <code>Kotlinlang</code> team, get the invitation from <a href="http://slack.kotlinlang.org">http://slack.kotlinlang.org</a></p>

<p>There is public channel <code>kontributors</code>. This is the one that most of contributors and JetBrains stuff are staying.</p>

<p>If you have trouble building Kotlin project or anything that is related to Kontribution, ask those questions at this channel.</p>

<p>Normally, people respond within one business day.</p>

<h3>YouTrack</h3>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/logo-text.png" width="250" style="border: none; padding: 16px" /></p>

<p>The second one is <a href="https://www.jetbrains.com/youtrack/">YouTrack</a>. YouTrack is the issue management tool that JetBrains developed.</p>

<p>Kotlin&rsquo;s public issues are listed <a href="https://youtrack.jetbrains.com/issues/KT">https://youtrack.jetbrains.com/issues/KT</a></p>

<p>You can work any issues if there is no assignees or no progress.</p>

<p>In case you are not sure which issue you want to work with, check for <code>up-for-grabs</code> tag or <a href="https://youtrack.jetbrains.com/issues/KT?q=tag:%20%7BUp%20For%20Grabs%7D%20%23Unresolved">https://youtrack.jetbrains.com/issues/KT?q=tag:%20%7BUp%20For%20Grabs%7D%20%23Unresolved</a> These issues are free to contribute.</p>

<p>After you find the issue you want to work with, the first thing you should do is comment &ldquo;I&rsquo;m going to do this&rdquo;. Since we are external contributors, JetBrains staff are not able to assign our name as assignee. However, once you comment the issue, you are treated as assignee.</p>

<h3>GitHub</h3>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/GitHub_Logo.png" width="250" style="border: none;" /></p>

<p>The last one is GitHub. GitHub is where JetBrains staff give us a feedback of your pull request. GitHub are not used for a lot of communication, except <a href="https://github.com/Kotlin/KEEP">KEEP</a>.</p>

<p>After sending pull request, I recommend to write pull request URL to YouTrack&rsquo;s issue. This is because JetBrains staff don&rsquo;t look at GitHub. They constantly check YouTrack but not GitHub. If you comment URL to the issue, the issue goes to top of the list. So, they can easily notice there is some progress for the issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Kontribute (V3) - Setup]]></title>
    <link href="http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-setup/"/>
    <updated>2018-03-17T00:00:01+09:00</updated>
    <id>http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-setup</id>
    <content type="html"><![CDATA[<p>This blog post describes how to start Kontribute or how to start contributing <a href="https://kotlinlang.org/">Kotlin</a>.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h2>Who am I?</h2>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/how-to-kontribute-v3.002.jpg" alt="intro" /></p>

<p>I&rsquo;ve been kontributors since July 2016. I made more than 60 commits by now. I love Kotlin, my beautiful wife and lovely son.</p>

<p>I talked about this topic a few times in different places. After speaking at DroidKaigi 2018 and Kotlin Night Kolkata, some people gave me feed back that it is also helpful for new Kontributors if I make a blog post in English. I am too lazy to write this from scratch, so I re-used some of contents from those presentation.</p>

<h2>Prerequisite</h2>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/how-to-kontribute-v3.004.jpg" alt="Prerequisite" /></p>

<p>This blog entry does not explain how to use git/github and how to write Kotlin.</p>

<p>Since I mainly contribute to Kotlin plguin features, this blog post focus on how to contribute kotlin plugin. However, once you undersntand how to do it, it is really easy to contribute to Kotlin Languages, Kotlin JS or Kotlin Native because it is in the same repository.</p>

<h2>Outline</h2>

<ul>
<li><a href="http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-setup/">Setup</a></li>
<li><a href="http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-communication/">Communication</a></li>
<li><a href="http://shiraji.github.io/blog/2018/03/17/how-to-kontribute-v3-recommend/">1st Recommended Ways to Kontribute</a></li>
<li>Developing/Testing Kotlin plugin</li>
</ul>


<h2>Setup</h2>

<p>It &ldquo;was&rdquo; the hardest part but not anymore. This is the reason I updated this topic as v3. There are &ldquo;only&rdquo; 4 parts of setups</p>

<h3>JDK</h3>

<p>The first one is JDK.</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/how-to-kontribute-v3.007.jpg" alt="JDK" /></p>

<p>You need to install 3 differenct versions of JDKs.</p>

<p>In order to use those JDK, you must setup environment variables like this</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/how-to-kontribute-v3.008.jpg" alt="JDK-env-var" /></p>

<p>It&rsquo;s quite annoying to set each environment variables. Here is what I did.</p>

<pre><code>export JAVA_HOME=`/usr/libexec/java_home -v "1.8"`
export JDK_16=`/usr/libexec/java_home -v "1.6"`
export JDK_17=`/usr/libexec/java_home -v "1.7"`
export JDK_18=`/usr/libexec/java_home -v "1.8"`
</code></pre>

<h3>Intellij IDEA &amp; Plugins</h3>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/how-to-kontribute-v3.008.jpg" alt="JDK-env-var" /></p>

<p>As for Intellij IDEA, you can use both community and ultimate version.</p>

<p>To make sure you are using latest kotlin plugin, check the following gif.</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/plugin_up-to-date.gif" alt="plugin_up-to-date" /></p>

<h3>Open project</h3>

<p>After setup Intellij IDEA, you can open kotlin plugin. First time you open the project, Intellij downloads all dependencies using gradle. It took me about 50 mins. Just wait.</p>

<h3>Module</h3>

<p>After downloading dependencies, you will notice that there is no source code in Project view. To fix this problem, you will need to do the followings:</p>

<ul>
<li>Go to File | New | Module from Existing Sources | and then select
<code>build.gradle.kts</code> file</li>
<li>After selecting the file, <code>Import Module from Gradle</code> dialog popup. Select <code>use default gradle wrapper</code></li>
</ul>


<p>The following gif visually describes the steps</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/module.gif" alt="module" /></p>

<h3>Run</h3>

<p>Setup is done. Let&rsquo;s run it. To run it, select <code>IDEA</code> run configuration and hit run button.</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-kontribute-v3/run.gif" alt="run" /></p>

<p>After waiting a few minites, the child IDEA shows up. What does this do is if you change your Kotlin project, the change is bundle to this child IDEA. You can test your new feature in this child IDEA.</p>

<p>If you cannot build or run the project, ask other kontributors! In next blog post, I will talk about how to intract with other Kontributors or JetBrains team.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KotlinPoetを使ってみた]]></title>
    <link href="http://shiraji.github.io/blog/2017/12/16/kotlinpoet/"/>
    <updated>2017-12-16T00:00:01+09:00</updated>
    <id>http://shiraji.github.io/blog/2017/12/16/kotlinpoet</id>
    <content type="html"><![CDATA[<p>KotlinPoetを使ってコード生成をしたので、触りだけですが、紹介したいと思います。</p>

<p>なおこのエントリーはKotlinPoet v0.6.0を利用しています。</p>

<h1>想定読者</h1>

<ul>
<li>KotlinPoetに興味がある人</li>
<li>JavaPoetを触ったこと・勉強したことがある人</li>
</ul>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>書いていないこと</h1>

<ul>
<li>JavaPoetの説明</li>
</ul>


<h1>KotlinPoetについて</h1>

<p>KotlinPoetはKotlinのコードを生成することを手助けするライブラリです。<a href="https://github.com/square/javapoet">JavaPoet</a>のKotlin版というイメージです。</p>

<p>以下のコードが</p>

<pre><code class="kotlin">val greeterClass = ClassName("", "Greeter")
val file = FileSpec.builder("", "HelloWorld")
    .addType(TypeSpec.classBuilder("Greeter")
        .primaryConstructor(FunSpec.constructorBuilder()
            .addParameter("name", String::class)
            .build())
        .addProperty(PropertySpec.builder("name", String::class)
            .initializer("name")
            .build())
        .addFunction(FunSpec.builder("greet")
            .addStatement("println(%S)", "Hello, \$name")
            .build())
        .build())
    .addFunction(FunSpec.builder("main")
        .addParameter("args", String::class, VARARG)
        .addStatement("%T(args[0]).greet()", greeterClass)
        .build())
    .build()

file.writeTo(System.out)
</code></pre>

<p>このコードを出力します。</p>

<pre><code class="kotlin">class Greeter(val name: String) {
  fun greet() {
    println("Hello, $name")
  }
}

fun main(vararg args: String) {
  Greeter(args[0]).greet()
}
</code></pre>

<p>KotlinPoetの紹介は<a href="https://youtu.be/_obNBSldffw">KotlinConfの動画</a>を観ると良いです。</p>

<h1>KotlinPoetの考え方</h1>

<p>実は上記のコード一点、非常に<strong>面白い</strong>点があります。</p>

<pre><code class="kotlin">class Greeter(val name: String)
</code></pre>

<p>primary constructorの生成です。KotlinPoetの以下の部分で生成しています。</p>

<pre><code class="kotlin">val file = FileSpec.builder("", "HelloWorld")
    .addType(TypeSpec.classBuilder("Greeter")
        .primaryConstructor(FunSpec.constructorBuilder()
            .addParameter("name", String::class)
            .build())
        .addProperty(PropertySpec.builder("name", String::class)
            .initializer("name")
            .build())
</code></pre>

<p>valの<code>name</code>をprimary constructorに入れるだけなのですが、KotlinPoetでは3回も<code>name</code>と記述しています。</p>

<p>せっかくなので、一つずつ見ていきましょう。まずPropertyを生成する場合、以下のコードになります。</p>

<pre><code class="kotlin">val file = FileSpec.builder("", "HelloWorld")
    .addType(TypeSpec.classBuilder("Greeter")
        .addProperty(PropertySpec.builder("name", String::class)
            .build())
</code></pre>

<p>以下のコードが生成されます。</p>

<pre><code class="kotlin">class Greeter {
    val name: String
}
</code></pre>

<p>次にprimary constructorに<code>name</code>入れたい為、primary constructorの設定を記述します。</p>

<pre><code class="diff">val file = FileSpec.builder("", "HelloWorld")
    .addType(TypeSpec.classBuilder("Greeter")
        .primaryConstructor(FunSpec.constructorBuilder()
            .addParameter("name", String::class)
            .build())
+       .addProperty(PropertySpec.builder("name", String::class)
+           .build())
</code></pre>

<p>そうするとこんなコードが生成されます。</p>

<pre><code class="kotlin">class Greeter(name: String) {
    val name: String
}
</code></pre>

<p>最後にprimary constructorとpropertyを連結するため、初期化方法を記述します。</p>

<pre><code class="diff">val file = FileSpec.builder("", "HelloWorld")
    .addType(TypeSpec.classBuilder("Greeter")
        .primaryConstructor(FunSpec.constructorBuilder()
            .addParameter("name", String::class)
            .build())
        .addProperty(PropertySpec.builder("name", String::class)
+           .initializer("name")
            .build())
</code></pre>

<p>これでようやく以下のコードが生成されるようになります。</p>

<pre><code class="kotlin">class Greeter(val name: String)
</code></pre>

<p>これは、記述されたコードは全て生成する。最適化はKotlinPoetがする。というKotlinPoetの考えからきているそうです。</p>

<p>KotlinConfの動画でも解説されていますので確認して見てください。 <a href="https://youtu.be/_obNBSldffw?t=20m40s">https://youtu.be/_obNBSldffw?t=20m40s</a></p>

<p>若干文法が違ったり、上記のような隠れた癖がある為、JavaPoetに慣れている方は最初戸惑うことがあるかもしれませんので、生成後のコードをしっかり確認した方が良いです。</p>

<p>ちなみにPermissionsDispatcherはKotlinPoetのこの挙動を知らず、<a href="https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/ddf14a1dd005d5fbb9bb51b445815d6af7e7125f">誤って外に出てしまったpropertyをコンストラクタに詰める為の修正</a>をv3.0.1で入れています:joy:</p>

<p>その時の開発者のつぶやきです。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">parameterとproperty作成して、property側のinitializerに変数名を入れるというまじかよ！って方法で達成した。なぜできるのか？という疑問は後で調査しよう。</p>&mdash; shiraji (@shiraj_i) <a href="https://twitter.com/shiraj_i/status/909327774044663808?ref_src=twsrc%5Etfw">2017年9月17日</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<h1>その他の代表的なコードの生成方法</h1>

<p>ファイル、クラス、クラスメンバー、プライマリコンストラクター、トップレベルの関数に関しては上記サンプルコードをみてください。</p>

<p>それ以外のよく使いそうなコードの生成方法をメモしておきます。</p>

<h2>コメント</h2>

<p>kotlinpoetのコード</p>

<pre><code class="kotlin">val file = FileSpec.builder("com.github.shiraji", "HelloWorld").addComment("コメント").build()
</code></pre>

<p>生成されるコード</p>

<pre><code class="kotlin">// コメント
package com.github.shiraji
</code></pre>

<p><code>FileSpec.Builder</code>の<code>addComment</code>を利用している為、ファイル上部にコメントしていますが、Builderの種類(TypeSpec.Builderなど)によりコメント位置が調整されます。</p>

<h2>フォーマット</h2>

<pre><code class="kotlin">val message = "ふふふ"
val file = FileSpec.builder("com.github.shiraji", "HelloWorld").addComment("コメント %L", message).build()
</code></pre>

<pre><code class="kotlin">// コメント ふふふ
package com.github.shiraji
</code></pre>

<p>フォーマットはJavaPoetと違い<code>%</code>を利用します。その他のフォーマットは<a href="https://square.github.io/kotlinpoet/0.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/index.html">こちら</a>を参照してください。</p>

<p><em>これ以降のコードはあまりフォーマットを利用していませんが、本来はこのフォーマットを使う方が良いです。</em></p>

<h2>initメソッド</h2>

<pre><code class="kotlin">    val file = FileSpec.builder("com.github.shiraji", "HelloWorld")
            .addType(TypeSpec.classBuilder("Greeter")
                    .addInitializerBlock(CodeBlock.builder()
                            .addStatement("val i = 10")
                            .build())
                    .build())
            .build()
</code></pre>

<pre><code class="kotlin">package com.github.shiraji

class Greeter {
  init {
    val i = 10
  }
}
</code></pre>

<h2>Secondary Constructor</h2>

<pre><code class="kotlin">    val file = FileSpec.builder("com.github.shiraji", "HelloWorld")
            .addType(TypeSpec.classBuilder("Greeter")
                    .primaryConstructor(FunSpec.constructorBuilder()
                            .addParameter("name", String::class)
                            .build())
                    .addFunction(FunSpec.constructorBuilder()
                            .callThisConstructor("name") // callSuperConstructorもあります。
                            .addParameter("name", String::class)
                            .addParameter("lastname", String::class)
                            .build())
                    .build())
            .build()
</code></pre>

<pre><code class="kotlin">package com.github.shiraji

import kotlin.String

class Greeter(name: String) {
  constructor(name: String, lastname: String) : this(name)
}
</code></pre>

<h2>拡張関数</h2>

<pre><code class="kotlin">    val file = FileSpec.builder("com.github.shiraji", "HelloWorld")
            .addType(TypeSpec.classBuilder("Greeter")
                    .addFunction(FunSpec.builder("foo")
                            .receiver(String::class)
                            .build())
                    .build())
            .build()
</code></pre>

<pre><code class="kotlin">package com.github.shiraji

import kotlin.String

class Greeter {
  fun String.foo() {
  }
}
</code></pre>

<h2>Class修飾子(Dataクラス)</h2>

<pre><code class="kotlin">    val file = FileSpec.builder("com.github.shiraji", "HelloWorld")
            .addType(TypeSpec.classBuilder("Foo")
                    .addModifiers(KModifier.DATA) // KModifier.ENUMなどもあります
                    .build())
</code></pre>

<pre><code class="kotlin">package com.github.shiraji

data class Foo
</code></pre>

<h2>if/else</h2>

<pre><code class="kotlin">    val file = FileSpec.builder("com.github.shiraji", "HelloWorld")
            .addType(TypeSpec.classBuilder("Greeter")
                    .addFunction(FunSpec.builder("foo")
                            .beginControlFlow("if (true)")
                            .addStatement("val i1 = 10")
                            .endControlFlow()
                            .beginControlFlow("else")
                            .addStatement("val i2 = 20")
                            .endControlFlow()
                            .build())
                    .build())
            .build()
</code></pre>

<pre><code class="kotlin">package com.github.shiraji

class Greeter {
  fun foo() {
    if (true) {
      val i1 = 10
    }
    else {
      val i2 = 20
    }
  }
}
</code></pre>

<h2>when</h2>

<pre><code class="kotlin">    val file = FileSpec.builder("com.github.shiraji", "HelloWorld")
            .addType(TypeSpec.classBuilder("Greeter")
                    .addFunction(FunSpec.builder("foo")
                            .addStatement("val i = 10")
                            .beginControlFlow("when(i)")
                            .beginControlFlow("10 -&gt;")
                            .addStatement("println(\"foo\")")
                            .endControlFlow()
                            .beginControlFlow("20 -&gt;")
                            .addStatement("println(\"foo222\")")
                            .endControlFlow()
                            .endControlFlow()
                            .build())
                    .build())
            .build()
</code></pre>

<pre><code class="kotlin">package com.github.shiraji

class Greeter {
  fun foo() {
    val i = 10
    when(i) {
      10 -&gt; {
        println("foo")
      }
      20 -&gt; {
        println("foo222")
      }
    }
  }
}
</code></pre>

<h2>インデント</h2>

<pre><code class="kotlin">val file = FileSpec.builder("com.github.shiraji", "HelloWorld").addComment("%&gt;コメント").build()
</code></pre>

<pre><code class="kotlin">  // コメント
  package com.github.shiraji
</code></pre>

<p>アンインデントされるまでインデントされ続けます。</p>

<h2>アンインデント</h2>

<pre><code class="kotlin">val file = FileSpec.builder("com.github.shiraji", "HelloWorld").addComment("%&gt;コメント%&lt;").build()
</code></pre>

<pre><code class="kotlin">  // コメント
package com.github.shiraji
</code></pre>

<h1>APIドキュメント</h1>

<p>その他知りたければ、KotlinPoetの<a href="https://square.github.io/kotlinpoet/0.x/kotlinpoet/com.squareup.kotlinpoet/index.html">APIドキュメント</a>を確認して下さい。(v0.x系以降のドキュメントはURLが変更されるかも？)</p>

<h1>最後に</h1>

<p>PermissionsDispatcherの<a href="https://github.com/permissions-dispatcher/PermissionsDispatcher/tree/123e50a184e058ad6b4adb0b659a343d79813913/processor/src/main/kotlin/permissions/dispatcher/processor/impl/kotlin">この辺り</a>を眺めるとKotlinPoetの実装の参考になると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PermissionsDispatcher V3に関して]]></title>
    <link href="http://shiraji.github.io/blog/2017/12/05/permissions-dispatcher-v3/"/>
    <updated>2017-12-05T00:01:38+09:00</updated>
    <id>http://shiraji.github.io/blog/2017/12/05/permissions-dispatcher-v3</id>
    <content type="html"><![CDATA[<p>この記事は <a href="https://qiita.com/advent-calendar/2017/android">Android Advent Calendar 2017</a> の5日目の記事です。</p>

<h2>はじめに</h2>

<p><a href="https://github.com/permissions-dispatcher/PermissionsDispatcher">PermissionsDispatcher</a> v3が今年の9月にリリースされました🎉</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="en" dir="ltr">Finally PermissionsDispatcher 3.0.0 is out😄 We added fully <a href="https://twitter.com/kotlin?ref_src=twsrc%5Etfw">@kotlin</a> support and a few improvements🎉Enjoy✌️ <a href="https://t.co/3a1SQ17AWb">https://t.co/3a1SQ17AWb</a></p>&mdash; hotchemi (@hotchemi) <a href="https://twitter.com/hotchemi/status/908889575208116229?ref_src=twsrc%5Etfw">2017年9月16日</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>結構大きな修正であったので、これに関して書きます。</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h2>自己紹介</h2>

<p>PermissionsDispatcherのコミッターの一人です。今年はそれほどコードでの貢献が出来なかったので、この記事を書くことで何か貢献したいと思います。</p>

<h2>想定読者</h2>

<ul>
<li>PermissionsDispatcherを使ったことがある人</li>
<li>PermissionsDispatcher v3に興味がある人</li>
</ul>


<h2>書いていないこと</h2>

<ul>
<li>PermissionsDispatcherの使い方</li>
<li>KotlinPoetに関して</li>
</ul>


<h2>PermissionsDispatcher v3への移行方法</h2>

<p>まずv2を使っている人はv3への移行をする必要があります。移行手順は以下にあります。</p>

<p><a href="https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/master/doc/migration_guide.md#migrating-to-3x">https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/master/doc/migration_guide.md#migrating-to-3x</a></p>

<p>簡単に解説すると以下の二点の修正が必要になります。</p>

<ul>
<li>Kotlinユーザは<code>XxxPermissionsDispatcher</code>クラスが無くなり、<code>Activity</code>/<code>Fragment</code>の拡張関数として提供されるようになった</li>
<li>Java/Kotlin共に<code>XxxWithCheck</code>メソッドが<code>XxxWithPermissionCheck</code>メソッドに変更になった</li>
</ul>


<h2>生成されるKotlinコード</h2>

<p>実際に生成されるKotlinのソースを見てみましょう。<a href="https://github.com/permissions-dispatcher/PermissionsDispatcher/tree/123e50a184e058ad6b4adb0b659a343d79813913/sample-kotlin">sample-kotlinモジュール</a>では以下のコードが生成されます。</p>

<pre><code class="kotlin">private val REQUEST_SHOWCAMERA: Int = 0

private val PERMISSION_SHOWCAMERA: Array&lt;String&gt; = arrayOf("android.permission.CAMERA")

private val REQUEST_SHOWCONTACTS: Int = 1

private val PERMISSION_SHOWCONTACTS: Array&lt;String&gt; = arrayOf("android.permission.READ_CONTACTS", "android.permission.WRITE_CONTACTS")

fun MainActivity.showCameraWithPermissionCheck() {
  if (PermissionUtils.hasSelfPermissions(this, *PERMISSION_SHOWCAMERA)) {
    showCamera()
  } else {
    if (PermissionUtils.shouldShowRequestPermissionRationale(this, *PERMISSION_SHOWCAMERA)) {
      showRationaleForCamera(MainActivityShowCameraPermissionRequest(this))
    } else {
      ActivityCompat.requestPermissions(this, PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA)
    }
  }
}

fun MainActivity.showContactsWithPermissionCheck() {
  if (PermissionUtils.hasSelfPermissions(this, *PERMISSION_SHOWCONTACTS)) {
    showContacts()
  } else {
    if (PermissionUtils.shouldShowRequestPermissionRationale(this, *PERMISSION_SHOWCONTACTS)) {
      showRationaleForContacts(MainActivityShowContactsPermissionRequest(this))
    } else {
      ActivityCompat.requestPermissions(this, PERMISSION_SHOWCONTACTS, REQUEST_SHOWCONTACTS)
    }
  }
}

fun MainActivity.onRequestPermissionsResult(requestCode: Int, grantResults: IntArray) {
  when (requestCode) {
    REQUEST_SHOWCAMERA -&gt;
     {
      if (PermissionUtils.verifyPermissions(*grantResults)) {
        showCamera()
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(this, *PERMISSION_SHOWCAMERA)) {
          onCameraNeverAskAgain()
        } else {
          onCameraDenied()
        }
      }
    }
    REQUEST_SHOWCONTACTS -&gt;
     {
      if (PermissionUtils.verifyPermissions(*grantResults)) {
        showContacts()
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(this, *PERMISSION_SHOWCONTACTS)) {
          onContactsNeverAskAgain()
        } else {
          onContactsDenied()
        }
      }
    }
  }
}

private class MainActivityShowCameraPermissionRequest(target: MainActivity) : PermissionRequest {
  private val weakTarget: WeakReference&lt;MainActivity&gt; = WeakReference(target)

  override fun proceed() {
    val target = weakTarget.get() ?: return
    ActivityCompat.requestPermissions(target, PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA)
  }

  override fun cancel() {
    val target = weakTarget.get() ?: return
    target.onCameraDenied()
  }
}

private class MainActivityShowContactsPermissionRequest(target: MainActivity) : PermissionRequest {
  private val weakTarget: WeakReference&lt;MainActivity&gt; = WeakReference(target)

  override fun proceed() {
    val target = weakTarget.get() ?: return
    ActivityCompat.requestPermissions(target, PERMISSION_SHOWCONTACTS, REQUEST_SHOWCONTACTS)
  }

  override fun cancel() {
    val target = weakTarget.get() ?: return
    target.onContactsDenied()
  }
}
</code></pre>

<p><code>REQUEST_*</code>や<code>PERMISSION_*</code>はv2では<code>MainActivityPermissionsDispatcher</code>クラス内で定義されていましたが、privateのトップレベルでの定義に変わりました。
また、<code>showCameraWithPermissionCheck</code>や<code>onRequestPermissionsResult</code>は<code>MainActivity</code>の拡張関数になっています。その為、<code>MainActivityPermissionsDispatcher</code>クラスがなくなりました。(Javaの方では存在しています。)</p>

<h2>なんでこんな変更になったのか？</h2>

<h3>Kotlinの拡張関数</h3>

<p><a href="https://github.com/square/kotlinpoet">KotlinPoet</a>の出現から、これを使ってKotlinコードの生成してみよう->どうせならKotlinっぽく拡張関数にしてみよう！という流れで拡張関数を使うことになりました。</p>

<p>詳細は以下のIssueを確認してみて下さい。</p>

<p><a href="https://github.com/permissions-dispatcher/PermissionsDispatcher/issues/320">https://github.com/permissions-dispatcher/PermissionsDispatcher/issues/320</a></p>

<h3>XxxWithPermissionCheckへのリネーム</h3>

<p>以下のIssueで問題提起されました。</p>

<p><a href="https://github.com/permissions-dispatcher/PermissionsDispatcher/issues/355">https://github.com/permissions-dispatcher/PermissionsDispatcher/issues/355</a></p>

<p>このIssueでは漠然とした質問でしたが、Kotlinユーザに対して、拡張関数として提供する場合、<code>WithCheck</code>では意味がわからないのではないか？という話から一気にv3.0に導入する流れになりました。</p>

<h2>懸念事項</h2>

<h3>Kotlin向けのlint</h3>

<p>PermissionsDispatcherはカスタムlintを提供していますが、Kotlin実装向けのlintの対応がまだ終わっていません。(実際の問題はUASTのKotlin対応)</p>

<p>この件に関するIssueは以下</p>

<p><a href="https://github.com/permissions-dispatcher/PermissionsDispatcher/issues/373">https://github.com/permissions-dispatcher/PermissionsDispatcher/issues/373</a></p>

<h3>Intellij Plugin</h3>

<p><a href="https://github.com/permissions-dispatcher/permissions-dispatcher-plugin">permissions-dispatcher-plugin</a>と言うIntellijプラグインですが、メイン開発者の <a href="https://github.com/shiraji">@shiraji</a> がサボっている為、v3対応がされていません。また<a href="https://github.com/permissions-dispatcher/permissions-dispatcher-plugin/issues/79#issuecomment-346983436">もうv2の対応しなくて良くね？</a>と言っており、誰からも反論がない為、急にv3のみのサポートになる予定です。</p>

<p>そんなにいないと思いますが・・・このプラグインを使っていて、v2のみしか使っていない人はこれを機にv3へのアップグレードをよろしくお願いいたします。多分今年度中にはプラグインの方も対応します。</p>

<h2>あんまり利用者関係ない話</h2>

<h3>permissions-dispatcher orgが出来た</h3>

<p><a href="https://github.com/hotchemi">@hotchemi</a>さんからの提案で、permissions-dispatcher orgが出来ました。おかげ様で、ますますメンテナとして頑張りたい！と思えるように。以下がそのIssue</p>

<p><a href="https://github.com/permissions-dispatcher/PermissionsDispatcher/issues/353">https://github.com/permissions-dispatcher/PermissionsDispatcher/issues/353</a></p>

<p>数日前にあった<a href="http://hotchemi.hateblo.jp/entry/2017/12/03/003912">PermissionsDispatcherのプロダクトマネジメント</a>にも同じようなことが記述されていました。</p>

<h3>挙動を確認するテストを増やした</h3>

<p>7月に書いた<a href="http://shiraji.github.io/blog/2017/07/14/testing-against-annotation-processing/">Testing Against Annotation Processing</a>に詳細書いてあるので、読んでください!!!</p>

<h2>KotlinPoetに関して</h2>

<p>PermissionsDispatcherの<a href="https://github.com/permissions-dispatcher/PermissionsDispatcher/tree/123e50a184e058ad6b4adb0b659a343d79813913/processor/src/main/kotlin/permissions/dispatcher/processor/impl/kotlin">この辺り</a>を眺めるとKotlinPoetの実装の参考になると思います。<a href="https://qiita.com/advent-calendar/2017/kotlin">Kotlin Advent Calendar</a> の16日目にKotlinPoetに関する投稿がされるので、そちらも参照して下さい。</p>

<h2>最後に</h2>

<p>PermissionsDispatcherは非常に良いライブラリで、新しい仕組みも積極的に取り入れています。一緒に開発しませんか？</p>

<p>また、最近、ビルド出来ない。使い方がわからない。などなどREADME読んでません的なissueに上がってきます。これの対応に時間を割いてしまい、開発が滞りガチです。もし、PermissionsDispatcherに対して何か貢献したい！と言う方は、 このようなissueの対応や調査などなどお手伝いして頂けると非常に助かります。</p>
]]></content>
  </entry>
  
</feed>
