<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kotlin, | Shiraji's Blog]]></title>
  <link href="http://shiraji.github.io/blog/categories/kotlin/atom.xml" rel="self"/>
  <link href="http://shiraji.github.io/"/>
  <updated>2016-12-02T23:30:00+09:00</updated>
  <id>http://shiraji.github.io/</id>
  <author>
    <name><![CDATA[Shiraji]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tips for Creating Intellij Plugin in Kotlin]]></title>
    <link href="http://shiraji.github.io/blog/2016/09/18/create-intellij-plugin-2/"/>
    <updated>2016-09-18T21:14:03+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/09/18/create-intellij-plugin-2</id>
    <content type="html"><![CDATA[<p>This is the second blog post for &ldquo;Tips of creating Intellij plugin&rdquo;.</p>

<p>This entry is focus on tips for creating intellij plugin in Kotlin. (But I still believe it is useful for Java developers.)</p>

<p>For more basic tips, please read <a href="http://shiraji.github.io/blog/2016/03/28/create-intellij-plugin/">Tips for Creating Intellij Plugin</a></p>

<h1>Topics</h1>

<ul>
<li>How to find parent</li>
<li>How to find children</li>
<li>How to find files</li>
</ul>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>How to find parent</h1>

<p>Finding parent is just calling <code>PsiElement#getParent()</code>. However, in most case, I want to find a specific type of parent. In that case, using extension methods in <code>psiUtils.kt</code> is the best way to do it. <a href="https://github.com/shiraji/kotlin/blob/1.0.3/compiler/frontend/src/org/jetbrains/kotlin/psi/psiUtil/psiUtils.kt#L115-L129">psiUtils.kt</a> provides variety of useful extension methods.</p>

<p>For instance, if I want to find the function that the element belong,</p>

<pre><code class="kotlin">val parentFunc = element.getStrictParentOfType&lt;KtNamedFunction&gt;()
</code></pre>

<p>This method return <code>null</code> if there is no applicable element. (In the example, if the element is not located inside a function, it will be null.)</p>

<p>For Java developers, use <code>PsiTreeUtil.getParentOfType()</code></p>

<h1>How to find children</h1>

<p>After finding <code>psiUtils.kt</code>, I was expected to find children using something like <code>getStrictChildrenOfType</code> or something. Guess what. I was wrong. There are more useful methods in <a href="https://github.com/shiraji/kotlin/blob/1.0.3/compiler/frontend/src/org/jetbrains/kotlin/psi/psiUtil/psiUtils.kt#L173-L233">psiUtils.kt</a>. The reason why it is not <code>getStrictChildrenOfType</code> is I guess it requires to recursive tree visiting.</p>

<p>To find all children of specific types, use <code>collectDescendantsOfType</code></p>

<pre><code class="kotlin">element.collectDescendantsOfType&lt;KtExpression&gt;()
</code></pre>

<p>To find existance of children of specific type, use <code>anyDescendantOfType</code></p>

<pre><code class="kotlin">element.anyDescendantOfType&lt;KtNamedFunction&gt;()
</code></pre>

<p>To find the one child of specific type, use <code>findDescendantOfType</code></p>

<pre><code class="kotlin">element.findDescendantOfType&lt;KtFunctionLiteral&gt;()
</code></pre>

<h1>How to find files</h1>

<p>When I want to iterate though all resource files in my project, following one liner archive it</p>

<pre><code class="kotlin">FileTypeIndex.getFiles(XmlFileType.INSTANCE, ProjectScope.getProjectScope(project))
</code></pre>

<p>(Watch out <code>.idea/</code> folder. It is also include as &ldquo;Project&rdquo; so this line also grabs all xml files in &ldquo;.idea&rdquo;.)</p>

<p>This method find all files in specific types of specific scope. The above line finds all xml files in my project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Kontribute (for Japanese)]]></title>
    <link href="http://shiraji.github.io/blog/2016/07/14/how-to-kontribute/"/>
    <updated>2016-07-14T13:07:08+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/07/14/how-to-kontribute</id>
    <content type="html"><![CDATA[<p>This entry is for Japanese. For English speaker, please refer <a href="https://github.com/JetBrains/kotlin">kotlin repo</a></p>

<h1>最初に</h1>

<p>kotlinにcontributeし始めました。ドキュメントに書いてない部分があったので、主に自分用になりますが、書いておきます。</p>

<p>この文章は2016/07に書かれたので、その後、contribute方法が変わっているかもしれません。</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>contributeする前に<a href="https://github.com/JetBrains/kotlin/blob/master/ReadMe.md">README</a>は必ず読み込んでください。</p>

<h1>開発環境</h1>

<h2>JDK周り</h2>

<p>特に、JDKの設定は複雑です。jdk1.6, 1.7, 1.8全てが必要で、それらをドキュメント通り指定します。</p>

<pre><code>JDK_17=`/usr/libexec/java_home -v 1.7`
</code></pre>

<p>こんな感じで設定していきました。</p>

<h2>build</h2>

<p>pullには結構時間かかります。buildコマンドはドキュメントにある通り、</p>

<pre><code>ant -f update_dependencies.xml
ant -f build.xml
</code></pre>

<p>kotlin開発用プラグインのインストールも必要です。</p>

<p>全てが揃わない限り、ビルド出来ません。このあたりで断念するのはもったいないので、わからなければ、slackのkotlinlangのkontributorチャンネルで聞いてください。</p>

<p>kotlinlangのslackは<a href="https://kotlinlang.org/community.html%E3%81%93%E3%81%93%E3%81%AB%E8%A9%B3%E7%B4%B0%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82">https://kotlinlang.org/community.html%E3%81%93%E3%81%93%E3%81%AB%E8%A9%B3%E7%B4%B0%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82</a></p>

<h3>ANTの設定</h3>

<p>よくハマるのが、antの設定です。Heapサイズを増やさないとビルド出来ないことが多々発生します。</p>

<p>以下のように<code>ANT_OPTS</code>を設定して下さい。Xmxの数値は任意。</p>

<pre><code>export ANT_OPTS="-Xmx2048m -XX:MaxPermSize=2048m"
</code></pre>

<h2>run</h2>

<p>.idea/runConfigurationを見てもらうとわかるのですが、かなり多くのrun設定が含まれています。</p>

<p>ビルドが成功すれば、それらをrunするだけで、動きます。IDEAをrunすると自分の修正を取り込んだIntellijが立ち上がります。</p>

<h3>run test</h3>

<p>UnitテストもIDEAなどと同じでrun設定から起動します。</p>

<p>一つ一つのテストを起動することも出来ますが、working directoryがプロジェクトrootを指定しない限り動かないので注意。All IDEA Plugin Testsの設定を参考にしてください。</p>

<h3>Plugin &ldquo;GitHub&rdquo; was not loaded: required plugin &ldquo;Git4Idea&rdquo; not installed.</h3>

<p><code>ideaSDK/config-idea</code>の中身を全て消せばいいらしい。</p>

<p>でもそれで動くマシンと動かないマシンがあった。これに関しては謎。動かないマシンはもう一回環境構築しなおしてみます。</p>

<h4>追記</h4>

<p>理由がわかりました。テスト時にSDKに設定されているプラグインを全て読み込みます。</p>

<p><code>File &gt; Project Structure &gt; 1.8 &gt; Classpath</code></p>

<p>私の場合、ここに、CE版のgithubプラグインのパスが設定されていました。これを削除すると動くようになりました。</p>

<p>別プラグイン開発で使っていたものが残っていました。</p>

<h1>開発</h1>

<p>READMEにもありますが、kotlinにはまだまだいっぱいやることがあるので、contributeし放題です。</p>

<p><a href="https://youtrack.jetbrains.com/oauth?state=%2Fissues%2FKT%3Fq%3Dtag%3A%2520%257BUp%2520For%2520Grabs%257D%2520%2523Unresolved">YouTrack</a>からやりたいものを選んで下さい。</p>

<p>そのスレッドにやるわこれ！とコメントすると良いです。やっていいのかわからない場合は、kontributorチャンネルでやっていいか？という質問を投げて下さい。JetBrainsの営業時間になればだいたい回答が来ます。</p>

<h2>ブランチ名</h2>

<p>特にルールないらしい。なんでも良い。masterはさすがにマナー違反だと思う。</p>

<h2>コミットメッセージ</h2>

<p>あんまりルールがあるように見えない。<code>#KT-12345 Fixed</code>はつけたほうが良さ気。</p>

<h2>テスト</h2>

<p>基本書いたコードに対して考えられるケースのテストを書くことになる。<code>XxxTestGenerated</code>という名前のクラスはRun ConfigurationのGenerate Testsで自動生成されたテストケース。これらのテストケースは編集しない。</p>

<p>例えば、Inspectionのテストの場合、<a href="https://github.com/shiraji/kotlin/blob/1.0.3/idea/tests/org/jetbrains/kotlin/idea/codeInsight/InspectionTestGenerated.java">InspectionTestGenerated</a>があり、これにテストを追加するには<code>idea/testData/inspections</code>配下にフォルダを作成し、その下にテストデータを作成する。その後、"Generate Tests"を起動させると、テストケースが追加される。</p>

<h3>新規のUnit Test</h3>

<p>新規のUnit Testを書くことになるIssueもある。</p>

<p>その場合、通常通り、JUnitでテストを作成してもいいのだけど、<code>KotlinCodeInsightTestCase</code>を継承した、abstract classを作成し、<a href="https://github.com/shiraji/kotlin/blob/1.0.3/ultimate/tests/org/jetbrains/kotlin/tests/GenerateTests.kt">GenerateTests.kt</a>に追記すると、上記"Generate Tests"の対象となり、abstractクラスで作ったロジックに則った自動テストを作成することが出来る。</p>

<p>例えば、この<a href="https://github.com/JetBrains/kotlin/commit/391a0fdde5788ad7c8e854e7eba03a4e186256b5">PR</a>では<code>AbstractConcatenatedStringGeneratorTest</code>を作成して、<code>ConcatenatedStringGenerator</code>クラスをテストする自動テストケースを作成している。</p>

<h2>Pull Request</h2>

<p>特に気にせず投げてOK。</p>

<p>投げた後に、そのURLを対象のYouTrackのissueのコメントに貼り付けて欲しいとのこと。</p>

<h2>マージ</h2>

<p>マージはcherry-pick？でマージ先をJetBrainsの中の人がやってくれる。微修正までしてくれる。Authorは自分になる。(CommiterがJBの中の人。)</p>

<p>こんな感じ。</p>

<p><a href="https://github.com/JetBrains/kotlin/commits?author=shiraji">https://github.com/JetBrains/kotlin/commits?author=shiraji</a></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h1>ビルド出来なくなったら？</h1>

<p>kotlinプラグインは結構な頻度で更新されていきます。</p>

<p>急にビルド出来なくなった場合、まず、kotlinプラグインを最新のバージョンにしているのか確認して下さい。</p>

<p>また、masterにマージされているものが時々ビルドエラーを起こしたりします。こうなるとその修正が入るまで特に何も出来ません。我慢して待ちましょう！</p>

<p>ただ、2~3日ビルド出来ないというのは何かしら環境がおかしい場合があります。その時は以下の作業をしてみます。</p>

<ul>
<li><code>ideaSDK/config-idea</code>以下を削除する(Run時に使うプラグインを削除)</li>
<li><code>ant -f update_dependencies.xml</code>を実行する</li>
<li><code>ant dist</code>を実行する</li>
</ul>


<p>それでもだめならkontributorチャンネルで聞いてみましょう。</p>

<h1>雑感</h1>

<p>殺伐としておらず、やりたい！と手をあげたらやらせてくれる。ちょっとわかんね。となっても質問すれば教えてくれる。</p>

<p>kontributorチャンネルで聞けばだいたい問題は解決する。やってほしいIssueとかも聞けば答えてくれる。非常にやりやすい感じでした。</p>

<p>IDE周りは今まで結構コード書いてたり読んでたりしているので、引き続きcontributeしていこうかなと考えています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difference Between Generating Java and Generating Kotlin for Developing IntelliJ Plugin]]></title>
    <link href="http://shiraji.github.io/blog/2016/05/14/difference-between-psijavafile-and-ktfile/"/>
    <updated>2016-05-14T23:33:07+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/05/14/difference-between-psijavafile-and-ktfile</id>
    <content type="html"><![CDATA[<h1>Motivation</h1>

<p>I am a maintainer of <a href="https://github.com/shiraji/permissions-dispatcher-plugin">PermissionsDispatcher Plugin</a> which generates Java and Kotlin for <a href="https://github.com/hotchemi/PermissionsDispatcher">PermissionsDispatcher</a>
Since Kotlin is getting famous for Android developers, I thought IntelliJ plugins, which generate Android code, should support both Java and Kotlin. (By the way, <a href="http://blog.jetbrains.com/kotlin/2016/05/kotlin-1-0-2-is-here/">Kotlin 1.0.2</a> now supports Android lint! This definitely will lead more developers use Kotlin!)</p>

<p>However, while I was developing this plugin, I found really hard to generate both Java and Kotlin code.</p>

<p>So, this blog post describes what are the differences between generating Java and generating Kotlin using IntelliJ plugin.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>Environment</h1>

<p>Before start taking about the differences, the followings are the environment for this blog post.</p>

<ul>
<li>Kotlin for writing the plugin</li>
<li>Gradle for build</li>
<li><a href="https://github.com/JetBrains/gradle-intellij-plugin">gradle-intellij-plugin</a></li>
</ul>


<h1><code>getClasses</code> for <code>PsiJavaFile</code> vs <code>KtFile</code></h1>

<pre><code class="kotlin">e.getData(CommonDataKeys.PSI_FILE)
</code></pre>

<p>returns <code>PsiJavaFile</code> or <code>KtFile</code>. Both of them implements <code>PsiClassOwner</code> which means both of them has the method <code>PsiClass[] getClasses()</code>.</p>

<p>This method is useful for <code>PsiJavaFile</code>, it lets access classes of the file. The plugin can read/write contents of the classes.</p>

<p>For <code>KtFile</code>, I expected the same. I want to read/write code of classes. Yes, you can read <code>.class</code> file. It is not classes inside <code>.kt</code> file. So, even though, it has methods <code>add</code>, <code>addBefore</code> or <code>addAfter</code>, <code>KtFile#classes#add</code> throw an exception says the plugin won&rsquo;t be able to write contents to <code>.class</code> file!</p>

<p>If you want to get objects for generating code of Kotlin, then use <code>KtFile#getDeclarations</code>.</p>

<h1><code>PsiFactory</code></h1>

<p>This could be because I could not find the best way to generate code&hellip;but PsiFactory of Java and Kotlin is different</p>

<pre><code class="Kotlin">val psiElementFactory: PsiElementFactory = JavaPsiFacade.getElementFactory(project)
</code></pre>

<pre><code class="Kotlin">val psiFactory: KtPsiFactory = KtPsiFactory(project)
</code></pre>

<h1>Generating annotations</h1>

<p><code>PsiMethod</code> has modifierList</p>

<pre><code class="kotlin">method.modifierList.addAnnotation("Foo")`
</code></pre>

<p>On the other hand, <code>KtNamedFunction</code> has <code>addAnnotationEntry</code></p>

<pre><code class="kotlin">function.addAnnotationEntry(psiFactory.createAnnotationEntry("@Foo"))
</code></pre>

<p>To insert new line after annotation, you need to add new line manually.</p>

<pre><code class="kotlin">val entry = function.addAnnotationEntry(psiFactory.createAnnotationEntry("@Foo"))
entry.add(psiFactory.createNewLine())
</code></pre>

<h1>Generating methods</h1>

<p><code>PsiClass</code> is easy to add method. Use <code>createMethodFromText</code> and <code>add</code> to <code>PsiClass</code></p>

<pre><code class="kotlin">val methodTemplate = """void foo() {
}""".trimMargin()
val method = JavaPsiFacade.getElementFactory(project).createMethodFromText(methodTemplate, psiClass)
psiClass.add(method)
</code></pre>

<p>For kotlin, it&rsquo;s almost the same.</p>

<pre><code class="kotlin">val psiFactory = KtPsiFactory(project)
val function = psiFactory.createFunction("""void foo() {
}""".trimMargin())
ktClass.getBody()!!.addBefore(function, ktClass.getBody()!!.rBrace)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for Creating Intellij Plugin]]></title>
    <link href="http://shiraji.github.io/blog/2016/03/28/create-intellij-plugin/"/>
    <updated>2016-03-28T23:00:00+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/03/28/create-intellij-plugin</id>
    <content type="html"><![CDATA[<h1>Summery</h1>

<p>There are tips for creating intellij plugins</p>

<ul>
<li>Logging</li>
<li>plugin.xml</li>
<li>Action</li>
</ul>


<p>This is note for myself. I won&rsquo;t add description if the sample is clear enough for me.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>Logging</h1>

<p>Simply use Sys-out</p>

<pre><code class="Java">System.out.println("logging...")
</code></pre>

<p>However, sys-out shows logs on the console. If you want to show pop up, use notification</p>

<h2>Notification</h2>

<pre><code class="Kotlin">Notifications.Bus.notify(Notification("Plugin ID",
                "Title",
                "Content",
                NotificationType.INFORMATION))
</code></pre>

<h1>plugin.xml</h1>

<h2>URL of the plugin</h2>

<pre><code class="xml">&lt;idea-plugin url="https://plugins.jetbrains.com/plugin/8262?pr=" version="2"&gt;
</code></pre>

<h2>vendor</h2>

<pre><code class="xml">&lt;vendor email="isogai.shiraji@gmail.com" url="https://github.com/shiraji"&gt;Shiraji&lt;/vendor&gt;
</code></pre>

<h2>idea-version</h2>

<p>To use kotlin, IDE version should be higher than 143.</p>

<pre><code class="xml">&lt;idea-version since-build="143"/&gt;
</code></pre>

<h1>Action class</h1>

<h2>Creating new action</h2>

<pre><code>right click src &gt; New &gt; action
</code></pre>

<h2>Methods</h2>

<pre><code class="kotlin">override fun actionPerformed(e: AnActionEvent)
</code></pre>

<h2>Update method</h2>

<p>To decide show the action or not, I need to override the update method.</p>

<p>This method should be less than 0.1 sec to complete.</p>

<pre><code class="kotlin">override fun update(e: AnActionEvent?) {
    e ?: return
    super.update(e)

    if (!FindPullRequestModel(e).isEnable()) {
        e.presentation.isEnabled = false
        e.presentation.isVisible = false
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
