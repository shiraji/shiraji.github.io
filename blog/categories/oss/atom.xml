<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Oss | Shiraji's Blog]]></title>
  <link href="http://shiraji.github.io/blog/categories/oss/atom.xml" rel="self"/>
  <link href="http://shiraji.github.io/"/>
  <updated>2017-07-15T19:34:35+09:00</updated>
  <id>http://shiraji.github.io/</id>
  <author>
    <name><![CDATA[Shiraji]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Contribute R.swift (for Japanese Android Engineer)]]></title>
    <link href="http://shiraji.github.io/blog/2016/12/03/how-to-contribute-swift-library-r-dot-swift/"/>
    <updated>2016-12-03T00:00:00+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/12/03/how-to-contribute-swift-library-r-dot-swift</id>
    <content type="html"><![CDATA[<p>This entry is for Japanese speaker. Those who are interested to contribute R.swift, please refer to <a href="https://github.com/mac-cain13/R.swift/blob/master/Documentation/Contribute.md">this doc</a></p>

<p>これは<a href="http://qiita.com/advent-calendar/2016/ios">iOS Advent Calendar 2016</a>の12/3の記事です。</p>

<p>Swiftでprintlnを書いてハマるレベルのエンジニアが一週間(実稼働時間 約8時間)でR.swiftにコントリビュートしたお話。(だったけど、メンテナさんが別プロジェクト始めちゃってまだマージされていない。-> この記事の翌日2016/12/04にマージされましたー！)</p>

<p>Swift開発している人にとっては常識な話が多数だと思いますが、Android開発やKotlin触っていて、Swiftもやってみたい！とかSwiftのライブラリ開発してみたい！という人向けです。R.swiftのコントリビュート方法として紹介していますが、他のライブラリも同じ感じなのではないかなーと思ってます。</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>想定読者</h1>

<ul>
<li>Android開発やKotlin触っていいて、iOSの開発も興味がある</li>
<li>Swiftのライブラリにコントリビュートしてみたいけど、したことがない</li>
</ul>


<p>申し訳ないですが、iOS/Swift開発経験が長い人は想定外です。</p>

<h1>自己紹介</h1>

<p>Kotlinが好きなAndroidエンジニアです。</p>

<ul>
<li>Swift力: printlnとか書いて、コンパイルエラーになって、なんでや？って悩むくらい</li>
<li>Xcode力: 新規ファイル作成は任せろ！</li>
<li>その他: cocoapodは知ってた。ObjCは書いたことあったけど、ブランクが2年ほどある。</li>
</ul>


<p>iOS開発は素人に毛が生えた程度のレベルの人間ということです。</p>

<h1>経緯</h1>

<ul>
<li>Swift3の勉強したい。</li>
<li>あ、そういえば、こんな<a href="http://shiraji.github.io/blog/2016/01/10/pull_req_study/">記事</a>が・・・</li>
<li>やるか！</li>
</ul>


<h1>プロジェクト選定</h1>

<p>プルリク駆動開発のルールは以下です。</p>

<ul>
<li>GitHubのスターが500以上。出来れば5000以上</li>
<li>開発が活発</li>
<li>Issueがラベルなどで管理されている</li>
<li>放置されているpull requestが少ない</li>
<li>GitHubで完結している</li>
<li>使ったことあるなしは気にしない</li>
</ul>


<p>これに則って、勉強できそうな星多いライブラリを探してみました。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> ライブラリ概要 </th>
<th style="text-align:center;"> 検討した理由 </th>
<th style="text-align:left;"> 検討結果 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"><a href="https://github.com/ikesyo/Himotoki">Himotoki</a></td>
<td style="text-align:center;">タイプセーフなJSONデコードライブラリ</td>
<td style="text-align:center;">メンテナーが日本人のikesyoさんという安心感から。<br>(恐れ多くて関わったことがないのですが・・・)</td>
<td style="text-align:left;">issueなし！(スゲェ・・・</td>
</tr>
<tr>
<td style="text-align:center;"><a href="https://github.com/onevcat/Kingfisher">Kingfisher</a></td>
<td style="text-align:center;">Imageのダウンロード・キャッシングライブラリ</td>
<td style="text-align:center;">なんか名前がかっこよかった</td>
<td style="text-align:left;">開発活発○<br>ラベリングがない☓</td>
</tr>
<tr>
<td style="text-align:center;"><a href="https://github.com/Alamofire/Alamofire">Alamofire</a></td>
<td style="text-align:center;">Swift版HTTPネットワーク</td>
<td style="text-align:center;">Swiftやるならこれでしょという短絡的な発想</td>
<td style="text-align:left;">開発活発○<br>ラベリングあり○<br>メインテナー多そう○<br>HTTP周りの知識必須っぽい△</td>
</tr>
<tr>
<td style="text-align:center;"><a href="https://github.com/mac-cain13/R.swift">R.swift</a></td>
<td style="text-align:center;">コンパイルタイムでコード生成<br>Androidで言うRクラスを使えるようにするライブラリ</td>
<td style="text-align:center;">自分がAndroid出身者だから</td>
<td style="text-align:left;">開発活発○<br>ラベリングがしっかり○<br>メインテナーが複数いるっぽい○<br>自分が持っている知識でいけるっぽい○</td>
</tr>
</tbody>
</table>


<p>ということで今回は<a href="https://github.com/mac-cain13/R.swift">R.swift</a>を選択しました。</p>

<h1>実際に勉強出来た事</h1>

<p>今回のコントリビュートで以下の項目を勉強しました。</p>

<ul>
<li>ライブラリのビルド方法</li>
<li>サンプルアプリのビルド方法</li>
<li>Swiftの文法(optional/guard/コレクション処理など)</li>
<li>Cライブラリ/Cコードの導入方法</li>
<li>リフレクション?(Mirror)</li>
<li>XCTestの書き方</li>
</ul>


<p>なかなか濃い一週間でした。</p>

<h2>ライブラリのビルド方法</h2>

<p>ここをrswiftに変える。</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-contribute-swift-library-r-dot-swift/change_to_rswift_scheme.png" alt="change_to_rswift_scheme.png" /></p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-contribute-swift-library-r-dot-swift/change_scheme.png" alt="change_scheme.png" /></p>

<p>Runではなく、BuildでOK</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-contribute-swift-library-r-dot-swift/build_rswift.png" alt="build_rswift.png" /></p>

<h2>サンプルアプリのビルド方法</h2>

<p>ここをResourceAppに変える。</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-contribute-swift-library-r-dot-swift/change_to_rswift_scheme2.png" alt="change_to_rswift_scheme2.png" /></p>

<p>ライブラリのコード内に<code>print()</code>を書けば<code>rswift.log</code>というところにログが出力されるように設定されています。これを利用して、変更を確認していきます。</p>

<h2>Swiftの文法</h2>

<p>自分は本を読んで勉強するというタイプではなく、try-errorで実際に触って勉強するタイプです。</p>

<p>Swiftの文法も書きながら覚えていきましたが、ちょくちょくこれどうやればいいの？っていうのにぶつかりました。特にKotlinのsmartcastの知識が邪魔してきました。。。<code>if let guard</code>などは文法が結構特殊なので最後まで慣れませんでした。あと、一番の問題はSwift3を調べたいのですが、大量にSwift2などの古い日本語ドキュメントが出てきます。iOS開発者辛いなーという感じでした。OptionalもコンセプトはKotlinと似ているのですが・・・。この辺りでKotlinとSwiftが似ていると言っていた人を罵りたくなってました。</p>

<p>コレクション処理に関してはRubyやJava8、Kotlinなど他の言語でもよくあるものなので、そこまで苦しまなかったです。</p>

<h2>Cライブラリ/Cコードの導入方法</h2>

<p>残念ながら今回採用はしなかったのですが、Cコードの導入を試みました。</p>

<p>Androidであれば、NDKを入れて、Cコードとjnlを用意してーと本当に多くのことをやらないとCコードを利用することは出来ません。iOS開発のこれは強みで、比較的簡単に利用出来ます。</p>

<p>導入方法としては</p>

<ol>
<li>.h/.cファイルをプロジェクトに追加します。今回は<code>wildmatch.h</code>/<code>wildmatch.c</code></li>
<li>rswift-Bridging-Header.hファイルを作成し、利用したい.hをimportします。<code>#import "wildmatch.h"</code></li>
<li>Swiftで<code>wildmatch.h</code>にあるメソッドを呼び出します</li>
</ol>


<p>こんなことで利用出来てしまうんか！と驚愕しました。Xcodeのコンテントアシストにも即時反映されるし、驚きっぱなしでした。</p>

<h2>リフレクション?(Mirror)</h2>

<p>SwiftにもJavaのリフレクションがありました。<code>Mirror</code>というクラスを利用します。実はこれ使い方が間違っていたのかうまく動きませんでした。</p>

<pre><code class="swift">let imageMirror = Mirror(reflecting: R.image.self)
print(imageMirror.children.count) // show 0.
</code></pre>

<p>ちなみにこのコードであれば動きます。</p>

<pre><code class="swift">let imageMirror = Mirror(reflecting: R.image.settings)
print(imageMirror.children.count) // show children count.
</code></pre>

<p>たぶんselfとかのせいだろうなーと思いましたが、深追いはせず。</p>

<h2>XCTestの書き方</h2>

<p>ざっくりですが、JUnit3とほぼ同じです。</p>

<ul>
<li><code>setup</code>/<code>tearDown</code>メソッドが存在している</li>
<li><code>test</code>prefixをそれぞれのテストメソッドにつける</li>
</ul>


<p>BuildしたところにTestという選択肢があるので、それを選らんで実行。Java開発に慣れているなら特に問題なかったです。</p>

<p>ある程度開発した後に気づいたので、今回は利用しなかったのですが、XCTestでのTDD開発も可能です。たぶんそちらのほうが推奨されているのではないでしょうか。</p>

<h1>苦戦したところ</h1>

<p>メンテナさんにも指摘を受けたのですが、やっぱりところどころSwiftらしくない書き方をしてしまっているようです。たぶんKotlinの癖が出ているのではないかと。まだSwift力が低すぎてどこのことを言っているのか不明でした。</p>

<p>また、Swiftの<code>if let</code>や<code>guard</code>には結構苦戦しました。例えば今回こんな感じで、<code>ignoreFile</code>という変数を初期化するコードを書きました。</p>

<pre><code class="swift">  if let rswiftignoreURL = callInformation.rswiftignoreURL {
    ignoreFile = try IgnoreFile(ignoreFileURL: rswiftignoreURL) // Exceptionキャッチは別途している
  } else {
    ignoreFile = IgnoreFile()
  }
</code></pre>

<p><code>let rswiftignoreURL</code>が</p>

<pre><code class="swift">if let rswiftignoreURL = callInformation.rswiftignoreURL {
    ignoreFile = try IgnoreFile(ignoreFileURL: rswiftignoreURL) // Exceptionキャッチは別途している
}
</code></pre>

<p>このスコープ内で使えることに違和感がありました。</p>

<p>Kotlinの場合は<code>?.let</code>を利用した場合、lambdaの<code>{}</code>内で変数定義します。(上記Swiftコードは<code>else</code>もあるので再現するには、<code>?.let</code>ではだめだけど。あと<code>it</code>もあるけど、それは省略。)</p>

<pre><code class="kotlin">val ignoreFile = callInformation.rswiftignoreURL?.let { ignoreFileURL -&gt;
    IgnoreFile(ignoreFileURL: ignoreFileURL)
}
</code></pre>

<h1>最後に</h1>

<p>メインテナさんがPR投げてから、昇華していこうぜスタイルの自分にとって理想的な人でした。彼？のおかげで、わかる点までやってみて結果を貼って、質問するスタイルで勉強しつつコードを完成させることが出来ました。</p>

<p>みんな使ってね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Kontribute (for Japanese)]]></title>
    <link href="http://shiraji.github.io/blog/2016/07/14/how-to-kontribute/"/>
    <updated>2016-07-14T13:07:08+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/07/14/how-to-kontribute</id>
    <content type="html"><![CDATA[<p>This entry is for Japanese. For English speaker, please refer <a href="https://github.com/JetBrains/kotlin">kotlin repo</a></p>

<h1>最初に</h1>

<p>kotlinにcontributeし始めました。ドキュメントに書いてない部分があったので、主に自分用になりますが、書いておきます。</p>

<p>この文章は2016/07に書かれたので、その後、contribute方法が変わっているかもしれません。</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>contributeする前に<a href="https://github.com/JetBrains/kotlin/blob/master/ReadMe.md">README</a>は必ず読み込んでください。</p>

<h1>開発環境</h1>

<h2>JDK周り</h2>

<p>特に、JDKの設定は複雑です。jdk1.6, 1.7, 1.8全てが必要で、それらをドキュメント通り指定します。</p>

<pre><code>JDK_17=`/usr/libexec/java_home -v 1.7`
</code></pre>

<p>こんな感じで設定していきました。</p>

<h3>Windows user</h3>

<p>自分はWindowsでの開発をしていないのですが、Windowsで開発する場合、JDKはOracleさんが出しているものが良いようです。</p>

<p>Macであれば、OpenJDKでもOrableのやつでもどちらでも問題なくビルドできるそうです。</p>

<h2>build</h2>

<p>pullには結構時間かかります。buildコマンドはドキュメントにある通り、</p>

<pre><code>ant -f update_dependencies.xml
ant -f build.xml
</code></pre>

<p>kotlin開発用プラグインのインストールも必要です。</p>

<p>全てが揃わない限り、ビルド出来ません。このあたりで断念するのはもったいないので、わからなければ、slackのkotlinlangのkontributorチャンネルで聞いてください。</p>

<p>kotlinlangのslackは<a href="https://kotlinlang.org/community.html%E3%81%93%E3%81%93%E3%81%AB%E8%A9%B3%E7%B4%B0%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82">https://kotlinlang.org/community.html%E3%81%93%E3%81%93%E3%81%AB%E8%A9%B3%E7%B4%B0%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82</a></p>

<h3>ANTの設定</h3>

<p>よくハマるのが、antの設定です。Heapサイズを増やさないとビルド出来ないことが多々発生します。</p>

<p>以下のように<code>ANT_OPTS</code>を設定して下さい。Xmxの数値は任意。</p>

<pre><code>export ANT_OPTS="-Xmx2048m -XX:MaxPermSize=2048m"
</code></pre>

<h2>run</h2>

<p>.idea/runConfigurationを見てもらうとわかるのですが、かなり多くのrun設定が含まれています。</p>

<p>ビルドが成功すれば、それらをrunするだけで、動きます。IDEAをrunすると自分の修正を取り込んだIntellijが立ち上がります。</p>

<h3>run test</h3>

<p>UnitテストもIDEAなどと同じでrun設定から起動します。</p>

<p>一つ一つのテストを起動することも出来ますが、working directoryがプロジェクトrootを指定しない限り動かないので注意。All IDEA Plugin Testsの設定を参考にしてください。</p>

<h3>Plugin &ldquo;GitHub&rdquo; was not loaded: required plugin &ldquo;Git4Idea&rdquo; not installed.</h3>

<p><code>ideaSDK/config-idea</code>の中身を全て消せばいいらしい。</p>

<p>でもそれで動くマシンと動かないマシンがあった。これに関しては謎。動かないマシンはもう一回環境構築しなおしてみます。</p>

<h4>追記</h4>

<p>理由がわかりました。テスト時にSDKに設定されているプラグインを全て読み込みます。</p>

<p><code>File &gt; Project Structure &gt; 1.8 &gt; Classpath</code></p>

<p>私の場合、ここに、CE版のgithubプラグインのパスが設定されていました。これを削除すると動くようになりました。</p>

<p>別プラグイン開発で使っていたものが残っていました。</p>

<h1>開発</h1>

<p>READMEにもありますが、kotlinにはまだまだいっぱいやることがあるので、contributeし放題です。</p>

<p><a href="https://youtrack.jetbrains.com/oauth?state=%2Fissues%2FKT%3Fq%3Dtag%3A%2520%257BUp%2520For%2520Grabs%257D%2520%2523Unresolved">YouTrack</a>からやりたいものを選んで下さい。</p>

<p>そのスレッドにやるわこれ！とコメントすると良いです。やっていいのかわからない場合は、kontributorチャンネルでやっていいか？という質問を投げて下さい。JetBrainsの営業時間になればだいたい回答が来ます。</p>

<h2>ブランチ名</h2>

<p>特にルールないらしい。なんでも良い。masterはさすがにマナー違反だと思う。</p>

<h2>コミットメッセージ</h2>

<p>あんまりルールがあるように見えない。<code>#KT-12345 Fixed</code>はつけたほうが良さ気。</p>

<h2>テスト</h2>

<p>基本書いたコードに対して考えられるケースのテストを書くことになる。<code>XxxTestGenerated</code>という名前のクラスはRun ConfigurationのGenerate Testsで自動生成されたテストケース。これらのテストケースは編集しない。</p>

<p>例えば、Inspectionのテストの場合、<a href="https://github.com/shiraji/kotlin/blob/1.0.3/idea/tests/org/jetbrains/kotlin/idea/codeInsight/InspectionTestGenerated.java">InspectionTestGenerated</a>があり、これにテストを追加するには<code>idea/testData/inspections</code>配下にフォルダを作成し、その下にテストデータを作成する。その後、"Generate Tests"を起動させると、テストケースが追加される。</p>

<h3>新規のUnit Test</h3>

<p>新規のUnit Testを書くことになるIssueもある。</p>

<p>その場合、通常通り、JUnitでテストを作成してもいいのだけど、<code>KotlinCodeInsightTestCase</code>を継承した、abstract classを作成し、<a href="https://github.com/shiraji/kotlin/blob/1.0.3/ultimate/tests/org/jetbrains/kotlin/tests/GenerateTests.kt">GenerateTests.kt</a>に追記すると、上記"Generate Tests"の対象となり、abstractクラスで作ったロジックに則った自動テストを作成することが出来る。</p>

<p>例えば、この<a href="https://github.com/JetBrains/kotlin/commit/391a0fdde5788ad7c8e854e7eba03a4e186256b5">PR</a>では<code>AbstractConcatenatedStringGeneratorTest</code>を作成して、<code>ConcatenatedStringGenerator</code>クラスをテストする自動テストケースを作成している。</p>

<h2>Pull Request</h2>

<p>特に気にせず投げてOK。</p>

<p>投げた後に、そのURLを対象のYouTrackのissueのコメントに貼り付けて欲しいとのこと。</p>

<h2>マージ</h2>

<p>マージはcherry-pick？でマージ先をJetBrainsの中の人がやってくれる。微修正までしてくれる。Authorは自分になる。(CommiterがJBの中の人。)</p>

<p>こんな感じ。</p>

<p><a href="https://github.com/JetBrains/kotlin/commits?author=shiraji">https://github.com/JetBrains/kotlin/commits?author=shiraji</a></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h1>ビルド出来なくなったら？</h1>

<p>kotlinプラグインは結構な頻度で更新されていきます。</p>

<p>急にビルド出来なくなった場合、まず、kotlinプラグインを最新のバージョンにしているのか確認して下さい。</p>

<p>また、masterにマージされているものが時々ビルドエラーを起こしたりします。こうなるとその修正が入るまで特に何も出来ません。我慢して待ちましょう！</p>

<p>ただ、2~3日ビルド出来ないというのは何かしら環境がおかしい場合があります。その時は以下の作業をしてみます。</p>

<ul>
<li><code>ideaSDK/config-idea</code>以下を削除する(Run時に使うプラグインを削除)</li>
<li><code>ant -f update_dependencies.xml</code>を実行する</li>
<li><code>ant dist</code>を実行する</li>
</ul>


<p>それでもだめならkontributorチャンネルで聞いてみましょう。</p>

<h1>雑感</h1>

<p>殺伐としておらず、やりたい！と手をあげたらやらせてくれる。ちょっとわかんね。となっても質問すれば教えてくれる。</p>

<p>kontributorチャンネルで聞けばだいたい問題は解決する。やってほしいIssueとかも聞けば答えてくれる。非常にやりやすい感じでした。</p>

<p>IDE周りは今まで結構コード書いてたり読んでたりしているので、引き続きcontributeしていこうかなと考えています。</p>
]]></content>
  </entry>
  
</feed>
