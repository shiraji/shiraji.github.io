<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Codegen | Shiraji's Blog]]></title>
  <link href="http://shiraji.github.io/blog/categories/codegen/atom.xml" rel="self"/>
  <link href="http://shiraji.github.io/"/>
  <updated>2017-12-16T00:06:30+09:00</updated>
  <id>http://shiraji.github.io/</id>
  <author>
    <name><![CDATA[Shiraji]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[KotlinPoetを使ってみた]]></title>
    <link href="http://shiraji.github.io/blog/2017/12/16/kotlinpoet/"/>
    <updated>2017-12-16T00:00:01+09:00</updated>
    <id>http://shiraji.github.io/blog/2017/12/16/kotlinpoet</id>
    <content type="html"><![CDATA[<p>KotlinPoetを使ってコード生成をしたので、触りだけですが、紹介したいと思います。</p>

<p>なおこのエントリーはKotlinPoet v0.6.0を利用しています。</p>

<h1>想定読者</h1>

<ul>
<li>KotlinPoetに興味がある人</li>
<li>JavaPoetを触ったこと・勉強したことがある人</li>
</ul>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>書いていないこと</h1>

<ul>
<li>JavaPoetの説明</li>
</ul>


<h1>KotlinPoetについて</h1>

<p>KotlinPoetはKotlinのコードを生成することを手助けするライブラリです。<a href="https://github.com/square/javapoet">JavaPoet</a>のKotlin版というイメージです。</p>

<p>以下のコードが</p>

<pre><code class="kotlin">val greeterClass = ClassName("", "Greeter")
val file = FileSpec.builder("", "HelloWorld")
    .addType(TypeSpec.classBuilder("Greeter")
        .primaryConstructor(FunSpec.constructorBuilder()
            .addParameter("name", String::class)
            .build())
        .addProperty(PropertySpec.builder("name", String::class)
            .initializer("name")
            .build())
        .addFunction(FunSpec.builder("greet")
            .addStatement("println(%S)", "Hello, \$name")
            .build())
        .build())
    .addFunction(FunSpec.builder("main")
        .addParameter("args", String::class, VARARG)
        .addStatement("%T(args[0]).greet()", greeterClass)
        .build())
    .build()

file.writeTo(System.out)
</code></pre>

<p>このコードを出力します。</p>

<pre><code class="kotlin">class Greeter(val name: String) {
  fun greet() {
    println("Hello, $name")
  }
}

fun main(vararg args: String) {
  Greeter(args[0]).greet()
}
</code></pre>

<p>KotlinPoetの紹介は<a href="https://youtu.be/_obNBSldffw">KotlinConfの動画</a>を観ると良いです。</p>

<h1>KotlinPoetの考え方</h1>

<p>実は上記のコード一点、非常に<strong>面白い</strong>点があります。</p>

<pre><code class="kotlin">class Greeter(val name: String)
</code></pre>

<p>primary constructorの生成です。KotlinPoetの以下の部分で生成しています。</p>

<pre><code class="kotlin">val file = FileSpec.builder("", "HelloWorld")
    .addType(TypeSpec.classBuilder("Greeter")
        .primaryConstructor(FunSpec.constructorBuilder()
            .addParameter("name", String::class)
            .build())
        .addProperty(PropertySpec.builder("name", String::class)
            .initializer("name")
            .build())
</code></pre>

<p>valの<code>name</code>をprimary constructorに入れるだけなのですが、KotlinPoetでは3回も<code>name</code>と記述しています。</p>

<p>せっかくなので、一つずつ見ていきましょう。まずPropertyを生成する場合、以下のコードになります。</p>

<pre><code class="kotlin">val file = FileSpec.builder("", "HelloWorld")
    .addType(TypeSpec.classBuilder("Greeter")
        .addProperty(PropertySpec.builder("name", String::class)
            .build())
</code></pre>

<p>以下のコードが生成されます。</p>

<pre><code class="kotlin">class Greeter {
    val name: String
}
</code></pre>

<p>次にprimary constructorに<code>name</code>入れたい為、primary constructorの設定を記述します。</p>

<pre><code class="diff">val file = FileSpec.builder("", "HelloWorld")
    .addType(TypeSpec.classBuilder("Greeter")
        .primaryConstructor(FunSpec.constructorBuilder()
            .addParameter("name", String::class)
            .build())
+       .addProperty(PropertySpec.builder("name", String::class)
+           .build())
</code></pre>

<p>そうするとこんなコードが生成されます。</p>

<pre><code class="kotlin">class Greeter(name: String) {
    val name: String
}
</code></pre>

<p>最後にprimary constructorとpropertyを連結するため、初期化方法を記述します。</p>

<pre><code class="diff">val file = FileSpec.builder("", "HelloWorld")
    .addType(TypeSpec.classBuilder("Greeter")
        .primaryConstructor(FunSpec.constructorBuilder()
            .addParameter("name", String::class)
            .build())
        .addProperty(PropertySpec.builder("name", String::class)
+           .initializer("name")
            .build())
</code></pre>

<p>これでようやく以下のコードが生成されるようになります。</p>

<pre><code class="kotlin">class Greeter(val name: String)
</code></pre>

<p>これは、記述されたコードは全て生成する。最適化はKotlinPoetがする。というKotlinPoetの考えからきているそうです。</p>

<p>KotlinConfの動画でも解説されていますので確認して見てください。 <a href="https://youtu.be/_obNBSldffw?t=20m40s">https://youtu.be/_obNBSldffw?t=20m40s</a></p>

<p>若干文法が違ったり、上記のような隠れた癖がある為、JavaPoetに慣れている方は最初戸惑うことがあるかもしれませんので、生成後のコードをしっかり確認した方が良いです。</p>

<p>ちなみにPermissionsDispatcherはKotlinPoetのこの挙動を知らず、<a href="https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/ddf14a1dd005d5fbb9bb51b445815d6af7e7125f">誤って外に出てしまったpropertyをコンストラクタに詰める為の修正</a>をv3.0.1で入れています:joy:</p>

<p>その時の開発者のつぶやきです。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">parameterとproperty作成して、property側のinitializerに変数名を入れるというまじかよ！って方法で達成した。なぜできるのか？という疑問は後で調査しよう。</p>&mdash; shiraji (@shiraj_i) <a href="https://twitter.com/shiraj_i/status/909327774044663808?ref_src=twsrc%5Etfw">2017年9月17日</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<h1>その他の代表的なコードの生成方法</h1>

<p>ファイル、クラス、クラスメンバー、プライマリコンストラクター、トップレベルの関数に関しては上記サンプルコードをみてください。</p>

<p>それ以外のよく使いそうなコードの生成方法をメモしておきます。</p>

<h2>コメント</h2>

<p>kotlinpoetのコード</p>

<pre><code class="kotlin">val file = FileSpec.builder("com.github.shiraji", "HelloWorld").addComment("コメント").build()
</code></pre>

<p>生成されるコード</p>

<pre><code class="kotlin">// コメント
package com.github.shiraji
</code></pre>

<p><code>FileSpec.Builder</code>の<code>addComment</code>を利用している為、ファイル上部にコメントしていますが、Builderの種類(TypeSpec.Builderなど)によりコメント位置が調整されます。</p>

<h2>フォーマット</h2>

<pre><code class="kotlin">val message = "ふふふ"
val file = FileSpec.builder("com.github.shiraji", "HelloWorld").addComment("コメント %L", message).build()
</code></pre>

<pre><code class="kotlin">// コメント ふふふ
package com.github.shiraji
</code></pre>

<p>フォーマットはJavaPoetと違い<code>%</code>を利用します。その他のフォーマットは<a href="https://square.github.io/kotlinpoet/0.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/index.html">こちら</a>を参照してください。</p>

<p><em>これ以降のコードはあまりフォーマットを利用していませんが、本来はこのフォーマットを使う方が良いです。</em></p>

<h2>initメソッド</h2>

<pre><code class="kotlin">    val file = FileSpec.builder("com.github.shiraji", "HelloWorld")
            .addType(TypeSpec.classBuilder("Greeter")
                    .addInitializerBlock(CodeBlock.builder()
                            .addStatement("val i = 10")
                            .build())
                    .build())
            .build()
</code></pre>

<pre><code class="kotlin">package com.github.shiraji

class Greeter {
  init {
    val i = 10
  }
}
</code></pre>

<h2>Secondary Constructor</h2>

<pre><code class="kotlin">    val file = FileSpec.builder("com.github.shiraji", "HelloWorld")
            .addType(TypeSpec.classBuilder("Greeter")
                    .primaryConstructor(FunSpec.constructorBuilder()
                            .addParameter("name", String::class)
                            .build())
                    .addFunction(FunSpec.constructorBuilder()
                            .callThisConstructor("name") // callSuperConstructorもあります。
                            .addParameter("name", String::class)
                            .addParameter("lastname", String::class)
                            .build())
                    .build())
            .build()
</code></pre>

<pre><code class="kotlin">package com.github.shiraji

import kotlin.String

class Greeter(name: String) {
  constructor(name: String, lastname: String) : this(name)
}
</code></pre>

<h2>拡張関数</h2>

<pre><code class="kotlin">    val file = FileSpec.builder("com.github.shiraji", "HelloWorld")
            .addType(TypeSpec.classBuilder("Greeter")
                    .addFunction(FunSpec.builder("foo")
                            .receiver(String::class)
                            .build())
                    .build())
            .build()
</code></pre>

<pre><code class="kotlin">package com.github.shiraji

import kotlin.String

class Greeter {
  fun String.foo() {
  }
}
</code></pre>

<h2>Class修飾子(Dataクラス)</h2>

<pre><code class="kotlin">    val file = FileSpec.builder("com.github.shiraji", "HelloWorld")
            .addType(TypeSpec.classBuilder("Foo")
                    .addModifiers(KModifier.DATA) // KModifier.ENUMなどもあります
                    .build())
</code></pre>

<pre><code class="kotlin">package com.github.shiraji

data class Foo
</code></pre>

<h2>if/else</h2>

<pre><code class="kotlin">    val file = FileSpec.builder("com.github.shiraji", "HelloWorld")
            .addType(TypeSpec.classBuilder("Greeter")
                    .addFunction(FunSpec.builder("foo")
                            .beginControlFlow("if (true)")
                            .addStatement("val i1 = 10")
                            .endControlFlow()
                            .beginControlFlow("else")
                            .addStatement("val i2 = 20")
                            .endControlFlow()
                            .build())
                    .build())
            .build()
</code></pre>

<pre><code class="kotlin">package com.github.shiraji

class Greeter {
  fun foo() {
    if (true) {
      val i1 = 10
    }
    else {
      val i2 = 20
    }
  }
}
</code></pre>

<h2>when</h2>

<pre><code class="kotlin">    val file = FileSpec.builder("com.github.shiraji", "HelloWorld")
            .addType(TypeSpec.classBuilder("Greeter")
                    .addFunction(FunSpec.builder("foo")
                            .addStatement("val i = 10")
                            .beginControlFlow("when(i)")
                            .beginControlFlow("10 -&gt;")
                            .addStatement("println(\"foo\")")
                            .endControlFlow()
                            .beginControlFlow("20 -&gt;")
                            .addStatement("println(\"foo222\")")
                            .endControlFlow()
                            .endControlFlow()
                            .build())
                    .build())
            .build()
</code></pre>

<pre><code class="kotlin">package com.github.shiraji

class Greeter {
  fun foo() {
    val i = 10
    when(i) {
      10 -&gt; {
        println("foo")
      }
      20 -&gt; {
        println("foo222")
      }
    }
  }
}
</code></pre>

<h2>インデント</h2>

<pre><code class="kotlin">val file = FileSpec.builder("com.github.shiraji", "HelloWorld").addComment("%&gt;コメント").build()
</code></pre>

<pre><code class="kotlin">  // コメント
  package com.github.shiraji
</code></pre>

<p>アンインデントされるまでインデントされ続けます。</p>

<h2>アンインデント</h2>

<pre><code class="kotlin">val file = FileSpec.builder("com.github.shiraji", "HelloWorld").addComment("%&gt;コメント%&lt;").build()
</code></pre>

<pre><code class="kotlin">  // コメント
package com.github.shiraji
</code></pre>

<h1>APIドキュメント</h1>

<p>その他知りたければ、KotlinPoetの<a href="https://square.github.io/kotlinpoet/0.x/kotlinpoet/com.squareup.kotlinpoet/index.html">APIドキュメント</a>を確認して下さい。(v0.x系以降のドキュメントはURLが変更されるかも？)</p>

<h1>最後に</h1>

<p>PermissionsDispatcherの<a href="https://github.com/permissions-dispatcher/PermissionsDispatcher/tree/123e50a184e058ad6b4adb0b659a343d79813913/processor/src/main/kotlin/permissions/dispatcher/processor/impl/kotlin">この辺り</a>を眺めるとKotlinPoetの実装の参考になると思います。</p>
]]></content>
  </entry>
  
</feed>
