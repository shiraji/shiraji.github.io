<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Intellij, | Shiraji's Blog]]></title>
  <link href="http://shiraji.github.io/blog/categories/intellij/atom.xml" rel="self"/>
  <link href="http://shiraji.github.io/"/>
  <updated>2016-07-17T18:00:41+09:00</updated>
  <id>http://shiraji.github.io/</id>
  <author>
    <name><![CDATA[Shiraji]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Create Intellij Custom Wizard]]></title>
    <link href="http://shiraji.github.io/blog/2016/07/11/create_intellij_wizard/"/>
    <updated>2016-07-11T13:22:11+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/07/11/create_intellij_wizard</id>
    <content type="html"><![CDATA[<p>Japanese text is following.(日本語は英語の下です。)</p>

<h1>Motivation</h1>

<p>When I created Intellij custom wizard called <a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard">gradle-intellij-plugin wizard</a>,
I read JetBrains <a href="http://www.jetbrains.org/intellij/sdk/docs/tutorials/project_wizard.html">official documentation</a>.
They explains how to <a href="http://www.jetbrains.org/intellij/sdk/docs/tutorials/project_wizard/module_types.html">support module types</a> and <a href="http://www.jetbrains.org/intellij/sdk/docs/tutorials/project_wizard/adding_new_steps.html">how to add new steps</a>.
However, what I want to know is how to add custom fields, how to add custom files, and how to customize files based on custom fields.</p>

<p>There is no such documentation at this point, so I decided to write this entry for me.</p>

<h1>Topics</h1>

<ul>
<li>How to add custom view</li>
<li>How to get the user input in <code>ModuleWizardStep</code></li>
<li>How to create a file</li>
<li>How to change the file contents</li>
</ul>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>How to add custom fields</h1>

<p>To add custom views, it really simple.</p>

<pre><code class="java">@Override
public JComponent getComponent() {
    return new JLabel("Provide some setting here");
}
</code></pre>

<p>Add custom views to <code>JComponent</code> and return <code>getComponent()</code>.</p>

<p>If you make a form file which binds to your <code>ModuleWizardStep</code>, then just return root panel.</p>

<p>In my case, I created GUI <a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.form">form file</a>
Then, bind the form file to <a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.java">IPGWizardSupportLanguageStep</a>.</p>

<p>It ends up</p>

<p><img src="https://raw.githubusercontent.com/shiraji/intellij-plugin-with-gradle-wizard/master/website/images/language.png" alt="language" /></p>

<p>In order to add &ldquo;Project SDK&rdquo; field, you need to override <code>getModuleType()</code> in your <code>ModuleBuilder</code></p>

<p>For instance, to pick standard Java sdk, write following code in kotlin.</p>

<pre><code class="kotlin">override fun getModuleType() = StdModuleTypes.JAVA
</code></pre>

<h1>How to get the user input in <code>ModuleWizardStep</code></h1>

<p>If a user click &ldquo;Next&rdquo; button, <code>ModuleWizardStep#updateDataModel()</code> will be called. You should pass/save the user input in the method.</p>

<p>In my case, it looks really bad design, but it directly passes the language to builder.</p>

<p><a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.java#L43-L46">https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.java#L43-L46</a></p>

<pre><code class="java">@Override
public void updateDataModel() {
    builder.setLanguage(languages.get(languageComboBox.getSelectedIndex()));
}
</code></pre>

<h1>How to create a file</h1>

<p>To create a file for new project, You can use <code>VfsUtil.saveText(VirtualFile, text)</code>.</p>

<p>I found really great method in intellij-community repo.</p>

<p><a href="https://github.com/JetBrains/intellij-community/blob/9d6477485d37e796036ee524788231f2f47e6ada/plugins/gradle/src/org/jetbrains/plugins/gradle/service/project/wizard/GradleModuleBuilder.java#L332-L360">https://github.com/JetBrains/intellij-community/blob/9d6477485d37e796036ee524788231f2f47e6ada/plugins/gradle/src/org/jetbrains/plugins/gradle/service/project/wizard/GradleModuleBuilder.java#L332-L360</a></p>

<p>I wish they open this method.</p>

<h1>How to change the file contents</h1>

<p>Use file template. You can check official documentation of <a href="https://www.jetbrains.com/help/idea/2016.1/file-and-code-templates.html">File and Code Templates</a></p>

<p>One thing I want to add is condition. The file template support conditions in following syntax.</p>

<pre><code>#if (${LANGUAGE} &amp;&amp; ${LANGUAGE} == "Kotlin")
apply plugin: 'kotlin'
#else
apply plugin: 'java'
#end
</code></pre>

<p>Watch out the indentation. You will generate useless spaces.</p>

<hr />

<p>日本語</p>

<h1>モチベーション</h1>

<p>Intellijのカスタムwizard <a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard">gradle-intellij-plugin wizard</a>を作った時、JetBrainsの<a href="http://www.jetbrains.org/intellij/sdk/docs/tutorials/project_wizard.html">公式ドキュメント</a>を読みました。</p>

<p>ただ、この公式ドキュメントは<a href="http://www.jetbrains.org/intellij/sdk/docs/tutorials/project_wizard/module_types.html">support module types</a>と<a href="http://www.jetbrains.org/intellij/sdk/docs/tutorials/project_wizard/adding_new_steps.html">how to add new steps</a>しかなく、カスタムフィールドの作成方法や、ファイルの追加方法、ファイルの編集方法などがありませんでした。</p>

<p>そこで、このエントリーでその辺りの説明をしたいと思います。</p>

<h1>トピック</h1>

<ul>
<li>カスタムビューの追加方法</li>
<li><code>ModuleWizardStep</code>内での入力情報の取得方法</li>
<li>ファイル作成方法</li>
<li>ファイルの内容変更方法</li>
</ul>


<h1>カスタムビューの追加方法</h1>

<p>カスタムビューの追加方法は正直言うとかなり簡単です。</p>

<pre><code class="java">@Override
public JComponent getComponent() {
    return new JLabel("Provide some setting here");
}
</code></pre>

<p>このメソッド内でカスタムビューを作成し、returnすればOKです。</p>

<p>もし、カスタマイズした<code>ModuleWizardStep</code>をformファイルにバインドしているのであれば、ルートのpanelをreturnするだけです。</p>

<p>自分の場合、<a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.form">フォームファイル</a>
これをこっちにバインドしています。
 <a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.java">IPGWizardSupportLanguageStep</a>.</p>

<p>最終的に出来上がるのが</p>

<p><img src="https://raw.githubusercontent.com/shiraji/intellij-plugin-with-gradle-wizard/master/website/images/language.png" alt="language" /></p>

<p>&ldquo;Project SDK"フィールドを作成するには、<code>getModuleType()</code>を継承する必要があります。</p>

<p>例えば、スタンダードなJava SDKを追加したい場合、以下のようにKoltinで記述します。</p>

<pre><code class="kotlin">override fun getModuleType() = StdModuleTypes.JAVA
</code></pre>

<h1><code>ModuleWizardStep</code>内での入力情報の取得方法</h1>

<p>ユーザが"Next"ボタンをクリックすると、<code>ModuleWizardStep#updateDataModel()</code>が呼ばれます。このメソッド内で値を取得したり、保存したりします。</p>

<p>自分の場合、かなり設計がクソだけど、builderに直接設定しちゃってます。(動けばええやろ？)</p>

<p><a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.java#L43-L46">https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.java#L43-L46</a></p>

<pre><code class="java">@Override
public void updateDataModel() {
    builder.setLanguage(languages.get(languageComboBox.getSelectedIndex()));
}
</code></pre>

<h1>ファイル作成方法</h1>

<p>ファイルを新しいプロジェクトに追加するには、<code>VfsUtil.saveText(VirtualFile, text)</code>を使います。</p>

<p>intellij-communityのレポジトリにめっちゃ良いメソッドがありました。</p>

<p><a href="https://github.com/JetBrains/intellij-community/blob/9d6477485d37e796036ee524788231f2f47e6ada/plugins/gradle/src/org/jetbrains/plugins/gradle/service/project/wizard/GradleModuleBuilder.java#L332-L360">https://github.com/JetBrains/intellij-community/blob/9d6477485d37e796036ee524788231f2f47e6ada/plugins/gradle/src/org/jetbrains/plugins/gradle/service/project/wizard/GradleModuleBuilder.java#L332-L360</a></p>

<p>これ公開してくれたらいいのにね。</p>

<h1>ファイルの内容変更方法</h1>

<p>IntellijのFile templateの仕組みを使います。File templateの<a href="https://www.jetbrains.com/help/idea/2016.1/file-and-code-templates.html">File and Code Templates</a>を読むと良いです。</p>

<p>一つ、条件文に関して記載がなかったので、追加で説明します。条件文の文法は以下です。</p>

<pre><code>#if (${LANGUAGE} &amp;&amp; ${LANGUAGE} == "Kotlin")
apply plugin: 'kotlin'
#else
apply plugin: 'java'
#end
</code></pre>

<p>spaceいっぱい生成しちゃうのでインデント気をつけて下さい。</p>
]]></content>
  </entry>
  
</feed>
