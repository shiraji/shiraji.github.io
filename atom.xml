<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shiraji's Blog]]></title>
  <link href="http://shiraji.github.io/atom.xml" rel="self"/>
  <link href="http://shiraji.github.io/"/>
  <updated>2017-09-22T22:32:47+09:00</updated>
  <id>http://shiraji.github.io/</id>
  <author>
    <name><![CDATA[Shiraji]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Against Annotation Processing]]></title>
    <link href="http://shiraji.github.io/blog/2017/07/14/testing-against-annotation-processing/"/>
    <updated>2017-07-14T00:11:22+09:00</updated>
    <id>http://shiraji.github.io/blog/2017/07/14/testing-against-annotation-processing</id>
    <content type="html"><![CDATA[<p>以下のPRを投げて、マージされました。</p>

<p>Add integration test cases for checking the behavior of generated code
<a href="https://github.com/hotchemi/PermissionsDispatcher/pull/339">https://github.com/hotchemi/PermissionsDispatcher/pull/339</a></p>

<p>このPRについて語ってみます。</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h2>想定読者</h2>

<ul>
<li>Annotation Processingに興味がある人</li>
<li>Annotation Processingを利用したライブラリを作っている人</li>
<li>PermissionsDispatcherに興味がある人</li>
<li>細かい単語を気にしない人</li>
</ul>


<h2>compile-testingによるテスト</h2>

<p>Annotation Processingのテストで検索するとだいたい<a href="https://github.com/google/compile-testing">compile-testing</a>を使えと書かれています。</p>

<p>compile-testingとは</p>

<blockquote><p>A library for testing javac compilation with or without annotation processors</p></blockquote>

<p>です。annotation processingのライブラリでよく使われる手法として、コードを読み込ませ、compile-testingを利用し想定通りのコードを出力しているかを確認しています。</p>

<p>こんな感じで書いています。</p>

<p><a href="https://github.com/shiraji/kenkenpa/blob/master/kenkenpa-compiler/src/test/java/com/github/shiraji/kenkenpa/compiler/HopTests.java#L17-L75">https://github.com/shiraji/kenkenpa/blob/master/kenkenpa-compiler/src/test/java/com/github/shiraji/kenkenpa/compiler/HopTests.java#L17-L75</a></p>

<ul>
<li>ユーザが書くであろうコード(JavaFileObject source)からcompile-testingが生成するコードが想定している生成コード(JavaFileObject expectedSource)と等しいかどうかを確認します。</li>
<li>コンパイルエラーなどが起こさないか？の確認もします。</li>
</ul>


<p>このテストを実行し、JUnitが全てパスした場合、思った通りのコードが生成され、コンパイルも問題なしです。私はこれだけで安心していました。</p>

<h2>挙動のテスト</h2>

<p>compile-testingが通りました！OKです！・・・でも本当にそうなんでしょうか？</p>

<p>テストしたのはcompilerが思った通りのコードを生成したことを確認しただけです。</p>

<p>本当に必要なテストは、生成したコードが実際に思った通り動くかどうかの挙動の確認であるはずです。</p>

<p>ライブラリ利用者からすれば、極論、生成されるコードなんてどんな形でも良いのです。挙動さえ正しければ良いはずです。(メソッド数や容量とか気になるけど。）
が、その挙動の確認はcompile-testingでは行っていません。</p>

<h2>ではどうするか？</h2>

<p>実際に生成したコードに対してテストを書けば良いはずです。</p>

<p>冒頭のPermissionsDispatcherの<a href="https://github.com/hotchemi/PermissionsDispatcher/pull/339">PR</a>でやったこととして</p>

<ul>
<li>testモジュールを作成した(設定による生成コードの違いがあるのでtest-v13も作っています。)</li>
<li>testモジュール内で実際にPermissionsDispatcherを利用するコードを書いた <a href="https://github.com/hotchemi/PermissionsDispatcher/pull/339/files#diff-fd72dbeb86d7072fd2fc764574b85633">https://github.com/hotchemi/PermissionsDispatcher/pull/339/files#diff-fd72dbeb86d7072fd2fc764574b85633</a></li>
<li>上記のコードで生成されるコードに関するテストを書いた <a href="https://github.com/hotchemi/PermissionsDispatcher/pull/339/files#diff-178f9383e58a228e87ded8c49a97b492">https://github.com/hotchemi/PermissionsDispatcher/pull/339/files#diff-178f9383e58a228e87ded8c49a97b492</a></li>
</ul>


<p>PermissionsDispatcherは<a href="https://github.com/hotchemi/PermissionsDispatcher#2-delegate-to-generated-class">Delegate to generated class</a>にある通り、2つのpublicメソッドを生成します。そこで、この2つのメソッドに対し、PowerMockito、Robolectricなどフル活用してテストを書きました。</p>

<p>このテストのメリットとして、今後PermissionsDispatcherは<a href="https://github.com/hotchemi/PermissionsDispatcher/issues/320">KotlinはKotlinらしいコードを生成しようぜ！</a>という話が上がっており、Kotlinらしいコードを生成したとしても、このテストが通りさえすれば、あくまで理論上ですが、どんなコードを生成しても問題ないと言えるはずです。</p>

<h2>compile-testing捨てるべきなの？</h2>

<p>捨てちゃダメです。冒頭のPRでは生成コードが必須になるため、正常系のテストしか行うことが出来ません。コンパイルエラーが発生した場合のエラーハンドリングが適切に行われているか？の確認としては非常に有効に活用できます。</p>

<p>compile-testingが何をテストしているのかをしっかり把握し、適材適所でのライブラリの選定が一番だと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualize Kotlin substringXxx Methods]]></title>
    <link href="http://shiraji.github.io/blog/2017/06/19/string-dot-substring-methods/"/>
    <updated>2017-06-19T04:41:47+09:00</updated>
    <id>http://shiraji.github.io/blog/2017/06/19/string-dot-substring-methods</id>
    <content type="html"><![CDATA[<p>I found very hard time to memorize the following methods.</p>

<ul>
<li>substringAfter</li>
<li>substringAfterLast</li>
<li>substringBefore</li>
<li>substringBeforeLast</li>
</ul>


<p>Here is the visuals that illustrate the differences between these methods.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h2>substringAfter</h2>

<p><code>substringAfter</code> tries to find the character(s) from &ldquo;beginning&rdquo;, and substrings &ldquo;after&rdquo; the characters</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/substrings/substringAfter.png" alt="substringAfter" /></p>

<h2>substringAfterLast</h2>

<p><code>substringAfterLast</code> tries to find the character(s) from &ldquo;last&rdquo;, and substrings &ldquo;after&rdquo; the characters</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/substrings/substringAfterLast.png" alt="substringAfterLast" /></p>

<h2>substringBefore</h2>

<p><code>substringBefore</code> tries to find the character(s) from &ldquo;beginning&rdquo;, and substrings &ldquo;before&rdquo; the characters</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/substrings/substringBefore.png" alt="substringBefore" /></p>

<h2>substringBeforeLast</h2>

<p><code>substringBeforeLast</code> tries to find the character(s) from &ldquo;last&rdquo;, and substrings &ldquo;before&rdquo; the characters</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/substrings/substringBeforeLast.png" alt="substringBeforeLast" /></p>

<h1>Text Summary</h1>

<p>The following list is the summary of these methods.</p>

<ul>
<li>&ldquo;Last&rdquo; -> find a match from the end</li>
<li>no &ldquo;Last&rdquo; -> find a match from the beginning</li>
<li>&ldquo;Before&rdquo; -> get all text before the match</li>
<li>&ldquo;After&rdquo; -> get all text after the match</li>
<li>The substring result does not include the matched text</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Extend Alt+Enter]]></title>
    <link href="http://shiraji.github.io/blog/2016/12/17/how-to-extend-alt+enter/"/>
    <updated>2016-12-17T00:00:01+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/12/17/how-to-extend-alt+enter</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://qiita.com/advent-calendar/2016/jetbrains">JetBrains Advent Calendar 2016</a>の12/17の記事です。</p>

<p>Intellij IDEAだけではないのですが、Alt+Enter(Intention)は自分で拡張したものを作ることが可能です。</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>自己紹介</h1>

<p>自分のページにリストされているIntellijプラグインページがページングされたらプラグイン開発辞めようと誓っていて、最近中の人と話したらページング機能ないけど？ｗと生涯現役プラグイン開発者としてやっていくことが決定した人間です。</p>

<p>Intentionだけではなく、Inspectionなども作成しており、Kotlinのコントリビュートもしています。Kotlinの主なコントリビュートもInspection/Intentionなので、ある程度説明出来るレベルだと思います。</p>

<h1>想定読者</h1>

<ul>
<li>Intentionを作ってみたい</li>
<li>プラグイン開発に興味がある</li>
<li>Intellijの機能をある程度理解している</li>
<li>kotlinの文法がそれなりに理解できる</li>
</ul>


<h1>Custom Intentionを作ってみる</h1>

<p>今回サンプルとして、Intention周りのプラグインをリリースしました。
<a href="https://plugins.jetbrains.com/plugin/9271">https://plugins.jetbrains.com/plugin/9271</a></p>

<p>ソースコード
<a href="https://github.com/shiraji/databinding-support">https://github.com/shiraji/databinding-support</a></p>

<p>これをベースにXMLファイルに対してのIntentionの説明をします。</p>

<p>今回はレイアウトファイルであり、<code>&lt;layout&gt;</code>タグがrootタグではなかった場合、<code>&lt;layout&gt;</code>タグでラップするというIntentionを作成します。</p>

<p><img src="https://raw.githubusercontent.com/shiraji/databinding-support/master/websites/images/wrap.gif" alt="wrap" /></p>

<p>プラグインの作成方法などは参考リンクにまとめてありますので、そちらを参照して下さい。</p>

<h2>Intentionクラス</h2>

<p><code>IntentionAction</code>を継承します。以下のメソッドを実装する必要があります。</p>

<h3><code>getText(): String</code></h3>

<p>popupで表示される時の文字列</p>

<h3><code>getFamilyName(): String</code></h3>

<p>よくわからねｗ(intellij-community/kotlin repo内でもgetText呼び出してるだけのところが多い。)</p>

<h3><code>startInWriteAction(): Boolean</code></h3>

<p>Write Action内で実行するかどうか。</p>

<h3><code>isAvailable(project: Project, editor: Editor?, file: PsiFile?): Boolean</code></h3>

<p>そのIntentionを利用可能かどうか判定する</p>

<h3><code>invoke(project: Project, editor: Editor?, file: PsiFile?)</code></h3>

<p>Intentionが選択時に実行されるメソッド。</p>

<p>今回は実際に以下のようなイメージになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.github.shiraji.databindinglayout.intentions</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ConvertToDatabindingLayoutIntention</span> <span class="p">:</span> <span class="n">IntentionAction</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">getText</span><span class="p">()</span> <span class="p">=</span> <span class="s">&quot;Convert to databinding layout&quot;</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">getFamilyName</span><span class="p">()</span> <span class="p">=</span> <span class="s">&quot;Convert to databinding layout&quot;</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">startInWriteAction</span><span class="p">()</span> <span class="p">=</span> <span class="k">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">isAvailable</span><span class="p">(</span><span class="n">project</span><span class="p">:</span> <span class="n">Project</span><span class="p">,</span> <span class="n">editor</span><span class="p">:</span> <span class="n">Editor</span><span class="p">?,</span> <span class="n">file</span><span class="p">:</span> <span class="n">PsiFile</span><span class="p">?):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// rootタグがlayoutではなく、androidのレイアウトファイルかどうかを判定。</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">project</span><span class="p">:</span> <span class="n">Project</span><span class="p">,</span> <span class="n">editor</span><span class="p">:</span> <span class="n">Editor</span><span class="p">?,</span> <span class="n">file</span><span class="p">:</span> <span class="n">PsiFile</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 新規&lt;layout&gt;タグを作成し、必要なattributeを追加し、root tagとする。</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/shiraji/databinding-support/blob/1.0.2/src/main/kotlin/com/github/shiraji/databindinglayout/intentions/ConvertToDatabindingLayoutIntention.kt">https://github.com/shiraji/databinding-support/blob/1.0.2/src/main/kotlin/com/github/shiraji/databindinglayout/intentions/ConvertToDatabindingLayoutIntention.kt</a></p>

<p>このrootタグかどうかとか、androidのレイアウトファイルかどうかの判定とか、何をどう書き換えるのかとかがたぶん一番難しい部分だと思います。ただ、ここはそれぞれのIntentionやプラグインで違うのでコード読んで頑張れｗとしか言えません。。。</p>

<p>唯一ある共通点としてはファイルなどの読み込みや解析はPsiを使います。例えば、xmlタグだったら<a href="https://github.com/JetBrains/intellij-community/blob/master/xml/xml-psi-api/src/com/intellij/psi/xml/XmlTag.java">XmlTag</a>、<a href="https://github.com/JetBrains/intellij-community/blob/master/xml/xml-psi-api/src/com/intellij/psi/xml/XmlAttribute.java">XmlAttribute</a>を使います。<code>PsiElement#replace()</code>でソースコードの置換することが出来ます。</p>

<p>それぞれのElement作成それぞれのファイルタイプ毎にFactoryが用意されています。Xmlなら<code>XmlElementFactory</code>で作成しています。Javaの場合だと<code>PsiElementFactory</code>だし、Kotlinなら<code>KtPsiFactory</code>を使います。</p>

<h2>plugin.xml</h2>

<p>Intentionクラスをplugin.xmlに定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;intentionAction&gt;</span>
</span><span class='line'>        <span class="nt">&lt;className&gt;</span>com.github.shiraji.databindinglayout.intentions.ConvertToDatabindingLayoutIntention<span class="nt">&lt;/className&gt;</span>
</span><span class='line'>        <span class="nt">&lt;category&gt;</span>Android<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/intentionAction&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/shiraji/databinding-support/blob/1.0.2/src/main/resources/META-INF/plugin.xml#L31-L34">https://github.com/shiraji/databinding-support/blob/1.0.2/src/main/resources/META-INF/plugin.xml#L31-L34</a></p>

<h2>Intentionの説明文を書く</h2>

<p>自分はちょくちょく忘れるのですが・・・(実際これを忘れて、1.0.1->1.0.2のバージョン更新をした。)</p>

<p>こんな感じで設定画面に説明文を書くことが可能です。</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-create-custom-intention/intention_setting.gif" alt="intention_settings" /></p>

<p>以下の3つのファイルを作成します。</p>

<ul>
<li>after.xml.template</li>
<li>before.xml.template</li>
<li>description.html</li>
</ul>


<p>それぞれが表示されるのはここです。</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-create-custom-intention/intention_desc.png" alt="intention_desc" /></p>

<p>例えば、JavaファイルののIntentionだった場合、<code>after.java.template</code>のようにファイル名を<code>after.{拡張子}.template</code>とすれば良いです。<code>before</code>のほうも同じです。</p>

<p>配置箇所は<code>resourcesフォルダ/intentionDescriptions/INTENSION名/</code>に配置します。</p>

<p><code>ConvertToDatabindingLayoutIntention</code>の場合、こんな感じ。</p>

<p><a href="https://github.com/shiraji/databinding-support/tree/1.0.2/src/main/resources/intentionDescriptions/ConvertToDatabindingLayoutIntention">https://github.com/shiraji/databinding-support/tree/1.0.2/src/main/resources/intentionDescriptions/ConvertToDatabindingLayoutIntention</a></p>

<h1>最後に</h1>

<p>Happy <code>alt+enter</code> life!</p>

<h1>参考リンク</h1>

<p>IntelliJ IDEAクイックスタート – インテンション</p>

<p><a href="http://samuraism.com/products/jetbrains/intellij-idea/quickstart/intentions">http://samuraism.com/products/jetbrains/intellij-idea/quickstart/intentions</a></p>

<p>プラグインプロジェクトの作成手順</p>

<p><a href="http://www.jetbrains.org/intellij/sdk/docs/index.html">http://www.jetbrains.org/intellij/sdk/docs/index.html</a></p>

<p>gradleを使う場合</p>

<p><a href="http://www.jetbrains.org/intellij/sdk/docs/tutorials/build_system.html?search=gradle">http://www.jetbrains.org/intellij/sdk/docs/tutorials/build_system.html?search=gradle</a></p>

<p>このgradleプラグインのセットアップウィザードはないので、gradle-intellij-plugin wizardを使うと便利だよ(ステマ)</p>

<p><a href="https://plugins.jetbrains.com/plugin/8450">https://plugins.jetbrains.com/plugin/8450</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's Good About Kotlin in Android Development]]></title>
    <link href="http://shiraji.github.io/blog/2016/12/11/whats-good-about-kotlin-in-android-development/"/>
    <updated>2016-12-11T00:00:01+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/12/11/whats-good-about-kotlin-in-android-development</id>
    <content type="html"><![CDATA[<p>これは<a href="http://qiita.com/advent-calendar/2016/kotlin">Kotlin Advent Calendar 2016</a>の12/11の記事です。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">kotlinでやるとAndroid簡単に書ける手法まとめとかないかな。extentionでbindingadapter書くとか、custom viewのコンストラクタをJvmOverloadsで省略とか。</p>&mdash; しらじ (@shiraj_i) <a href="https://twitter.com/shiraj_i/status/768082977569898496">2016年8月23日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>8月23日にこんなつぶやきをして、今日まで溜めたAndroid開発をしていて、こう書くと簡単でキモチイイ！！！というKotlinの文法を紹介したいと思います。</p>

<p>(あくまで自分が気持ちいいってだけだからね！)</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>自己紹介</h1>

<p><a href="https://blog.jetbrains.com/kotlin/2016/09/kotlin-1-0-4-is-here/">Kotlin 1.0.4</a>, <a href="https://blog.jetbrains.com/kotlin/2016/11/kotlin-1-0-5-is-here/">Kotlin 1.0.5</a>で名前が載ったExternal Contributorsの一人です(嬉しいから自慢)。主にKotlin Pluginの静的解析にコントリビュートしています。Kotlinで書かれている<a href="https://github.com/hotchemi/PermissionsDispatcher">PermissionsDispatcher</a>の開発にも参加しています。</p>

<p>Android開発経験3年ほどで、今はAndroidをJavaでもKotlinでも開発しています。</p>

<p>少しくらいならブログでAndroid/Kotlinネタ書いてもいいレベルかな？と思います。</p>

<h1>前提条件と想定読者</h1>

<ul>
<li>Android開発はある程度知っている</li>
<li>KotlinでのAndroid興味がある人</li>
<li>KotlinでのAndroid開発良いと言われてるけど、何がいいかわからねな人</li>
</ul>


<p>Kotlinの文法はJavaコードと比較すればだいたいわかる感じで記載していきますが、もしわからなければ、<a href="https://twitter.com/shiraj_i">@shiraj_i</a>にメンションいただければ答えますので、お気軽に質問して下さい。</p>

<h1>キモチイイ！文法たち</h1>

<p>Kotlinは書きやすいとよく耳にしますが、実際どういうところでどういう文法にすると「書きやすい」になるのかJavaとの比較があまりありません。そこで独断と偏見で気持ちいい文法だこれ！と思った文法や書き方を紹介したいと思います。</p>

<p>Kotlinで一番有名であろう機能、Null安全やセミコロンレスに関しては多くのドキュメントやブログがありますので割愛します。</p>

<h2>一行メソッド</h2>

<p>ある特定のテキストを返すだけのメソッドを作る時、Javaで書くとこんな感じになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;MyApp&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinでも同じように書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">getName</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;MyApp&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただ、Kotlinは一行でreturn出来る場合、<code>=</code>をつけて<code>{}</code>を省略することが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">getName</span><span class="p">():</span> <span class="n">String</span> <span class="p">=</span> <span class="s">&quot;MyApp&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>さらに、戻り値の型が明らかな場合、型の指定しなくても良いので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">getName</span><span class="p">()</span> <span class="p">=</span> <span class="s">&quot;MyApp&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>短くてだいぶ気持ちいいですね。</p>

<p>こんな感じで、以下もJavaの例文を出して、Kotlinで気持ち良くなっていきます。それではどんどんいきます。</p>

<h2>null時何する？</h2>

<p>例えば、パラメータがnullだった場合、即メソッドを抜けるという処理を書くとします。Javaの場合、結構色々書かなきゃいけません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">foo</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">text</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinはnull時にこれをしてくれという<code>?:</code>文法が用意されています。それを使うと一行で書けちゃいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">?:</span> <span class="k">return</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>null時に別値を代入ということも可能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">bar</span> <span class="p">=</span> <span class="n">text</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span> <span class="c1">// textをbarに代入する。textがnullだった場合、空文字とする。</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>空クラス</h2>

<p>Javaでは空クラスだろうと、<code>{}</code>を書かなくてはなりません。特に目印用のinterfaceとかであると思いますが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">Foo</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinではボディが空のクラスの場合、<code>{}</code>を書かなくて良いので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">interface</span> <span class="n">Foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>もちろん、classでも可能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Bar</span>
</span></code></pre></td></tr></table></div></figure>


<h2>空メソッド</h2>

<p>空メソッド。Javaの場合、<code>{}</code>を書かなくてはなりません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinの場合、一行メソッドと同じように書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">=</span> <span class="n">Unit</span>
</span></code></pre></td></tr></table></div></figure>


<p>あれ？ながｋ&hellip;気持ちいいですね！</p>

<h2>getter/setter省略</h2>

<p>Kotlinでは、getter/setterがあった場合、propertyとしてアクセス可能になります。AOSPに書いてあるgetter/setterも同様です。</p>

<p><code>Activity#getLayoutInflater()</code>を使うようなメソッドを定義する場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">LayoutInflater</span> <span class="nf">getLayoutInflater</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">activity</span><span class="o">.</span><span class="na">getLayoutInflater</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinで書くと以下のように書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">layoutInflater</span><span class="p">():</span> <span class="n">LayoutInflater</span> <span class="p">=</span> <span class="n">activity</span><span class="p">.</span><span class="n">layoutInflater</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際にはActivity内に<code>layoutInflater</code>というプロパティは存在していませんが、Kotlinが解釈してくれます。</p>

<p>もちろんですが、以下のようにも書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">layoutInflater</span><span class="p">():</span> <span class="n">LayoutInflater</span> <span class="p">=</span> <span class="n">activity</span><span class="p">.</span><span class="n">getLayoutInflater</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただ、Android Studioさんが「これプロパティアクセスに変えな？」というサジェストが出ます。</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/whats-good-about-kotlin-in-android-development/getter_setter.png" alt="getter_setter" /></p>

<p>Javaっぽいコードを書くとこのようにワーニングを出してくれるので、都度修正していくとKotlinらしい文法の勉強も捗ります。(platform typeにはご注意下さい)</p>

<h2>パラメータのデフォルト値</h2>

<p>ここのパラメータだいたい同じ値なのだけど、時々違うから、overloadメソッドを用意するか！ってことありませんか？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">maybeStartActivity</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">maybeStartActivity</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">intent</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">maybeStartActivity</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">chooser</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>かの有名な<a href="https://github.com/JakeWharton/u2020/blob/70dd9572f45afb21a62ff414d19b7c095d737372/src/main/java/com/jakewharton/u2020/util/Intents.java">u2020</a>にもありました。</p>

<p>Kotlinはパラメータのデフォルト値を定義出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'>  <span class="k">fun</span> <span class="nf">maybeStartActivity</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span> <span class="n">intent</span><span class="p">:</span> <span class="n">Intent</span><span class="p">,</span> <span class="n">chooser</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>カスタムViewのコンストラクタ</h3>

<p>パラメータのデフォルト値に関連して、カスタムViewのコンストラクタの定義って大変だと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">CustomView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">CustomView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">CustomView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleAttr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">);</span>
</span><span class='line'>    <span class="n">binding</span> <span class="o">=</span> <span class="n">DataBindingUtil</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">context</span><span class="o">),</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">custom_view</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinはデフォルト値を定義したメソッドを上記のようにJavaから見たら複数あるようにする<code>@JvmOverloads</code>というアノテーションがあります。</p>

<p>これを使うと、カスタムViewのコンストラクタは一行定義するだけで書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">@JvmOverloads</span> <span class="n">CustomView</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span> <span class="n">attrs</span><span class="p">:</span> <span class="n">AttributeSet</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span> <span class="n">defStyleAttr</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Kotlinのコンストラクタ自体は気持ちよくないので説明省略します。)</p>

<h2>キャストで括弧少ない</h2>

<p>Javaでキャストする場合、括弧が多くなりがちです。PagerAdapterの<code>destroyItem</code>を実装してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">＠</span><span class="n">Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroyItem</span><span class="o">(</span><span class="n">ViewGroup</span> <span class="n">container</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">((</span><span class="n">ViewPager</span><span class="o">)</span> <span class="n">container</span><span class="o">).</span><span class="na">removeView</span><span class="o">((</span><span class="n">View</span><span class="o">)</span> <span class="n">obj</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinだと<code>as</code>を使ってキャストします。文法的にも括弧が減り、どこで括弧が終わっているのかがわかりやすくなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">destroyItem</span><span class="p">(</span><span class="n">container</span><span class="p">:</span> <span class="n">ViewGroup</span><span class="p">?,</span> <span class="n">position</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="n">container</span> <span class="k">as</span> <span class="n">ViewPager</span><span class="p">).</span><span class="n">removeView</span><span class="p">(</span><span class="n">obj</span> <span class="k">as</span> <span class="n">View</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>キャスト失敗時に何する？</h3>

<p>null時に何する？との組み合わせることでキャスト失敗時に何するかの定義も簡単にできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">destroyItem</span><span class="p">(</span><span class="n">container</span><span class="p">:</span> <span class="n">ViewGroup</span><span class="p">?,</span> <span class="n">position</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">container</span> <span class="k">as</span><span class="p">?</span> <span class="n">ViewPager</span> <span class="o">?:</span> <span class="k">return</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、readonlyの変数のキャストに成功すると自動的にその変数をキャストしてくれます。メソッドパラメータはreadonly。各所に出てくる<code>val</code>と定義されている変数もreadonlyです。(余談ですが、immutableではありませんので注意して下さい。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">destroyItem</span><span class="p">(</span><span class="n">container</span><span class="p">:</span> <span class="n">ViewGroup</span><span class="p">?,</span> <span class="n">position</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">container</span> <span class="k">as</span><span class="p">?</span> <span class="n">ViewPager</span> <span class="o">?:</span> <span class="k">return</span>
</span><span class='line'>    <span class="n">obj</span> <span class="k">as</span><span class="p">?</span> <span class="n">View</span> <span class="o">?:</span> <span class="k">return</span>
</span><span class='line'>    <span class="n">container</span><span class="p">.</span><span class="n">removeView</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>mutable変数<code>var</code>の場合、<code>as?</code>後に変更可能なので、自動的にキャストしてもらえないので注意。Kotlinでは理由がない限り、<code>var</code>を使わないほうが良いです。</p>

<h2>Util系</h2>

<p>XxxUtilsとか作って、全メソッドをstaticにして、privateコンストラクタを作って・・・みたいなやり方をJavaではちょくちょくしていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogUtil</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">LogUtil</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">initLog</span><span class="o">(</span><span class="n">String</span> <span class="n">tag</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Timber</span><span class="o">.</span><span class="na">plant</span><span class="o">(</span><span class="n">ExtTree</span><span class="o">(</span><span class="n">tag</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>kotlinではTopレベルにメソッドを書けば、このようなUtil系のメソッドを書くことが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">initLog</span><span class="p">(</span><span class="n">tag</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">=</span> <span class="n">Timber</span><span class="p">.</span><span class="n">plant</span><span class="p">(</span><span class="n">ExtTree</span><span class="p">(</span><span class="n">tag</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>使い方もJavaのときと変わりません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">import</span> <span class="nn">package.initLog</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">initLog</span><span class="p">(</span><span class="s">&quot;MyApp&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Stringテンプレート</h2>

<p>JavaでStringの結合をする場合、こんな感じになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">return</span> <span class="n">originalResponse</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Cache-Control&quot;</span><span class="o">,</span> <span class="s">&quot;public, max-age=&quot;</span> <span class="o">+</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">3</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>KotlinにはStringテンプレートとしてString内に<code>${}</code>で変数を書くことが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">return</span> <span class="n">originalResponse</span><span class="p">.</span><span class="n">newBuilder</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">header</span><span class="p">(</span><span class="s">&quot;Cache-Control&quot;</span><span class="p">,</span> <span class="s">&quot;public, max-age=${60 * 3}&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">build</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>変数一つだけである場合、<code>{}</code>の省略も出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">foo</span> <span class="p">=</span> <span class="m">1</span>
</span><span class='line'><span class="k">val</span> <span class="py">bar</span> <span class="p">=</span> <span class="s">&quot;Text$foo&quot;</span> <span class="c1">// &lt;= &quot;Text1&quot;という文字列に</span>
</span></code></pre></td></tr></table></div></figure>


<h2>複数行のString</h2>

<p>JavaのStringで複数行を生成する場合、結構辛いです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="s">&quot;aaa\nbbb\nccc&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinでは<code>"""</code>を使うことで複数行のStringの定義を出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">text</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;aaa</span>
</span><span class='line'>              <span class="n">bbb</span>
</span><span class='line'>              <span class="n">ccc</span><span class="s">&quot;&quot;&quot;.trimMargin();</span>
</span></code></pre></td></tr></table></div></figure>


<p>.trimMargin()のこととか、マージンの開始位置とか複数行のStringは結構多機能ですが、詳細知りたければ<a href="https://kotlinlang.org/docs/reference/basic-types.html#string-literals">公式のstring-literals</a>を確認してね。</p>

<h2>複数if -> when</h2>

<p>Javaではifが複数ある場合、ちょっとつらいです。</p>

<p>例えば以下のようなコードがあったとします。(Javaでbehaviorを独自実装したときに使っていたコード)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">isAnimating</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">consumed</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">hide</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">show</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをKotlinでもそのままif/else書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">isAnimating</span><span class="p">)</span> <span class="k">return</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">consumed</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">hide</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">show</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかし、もう少し簡単にwhenでまとめることも可能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">when</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">isAnimating</span> <span class="p">-&gt;</span> <span class="k">return</span>
</span><span class='line'>    <span class="n">consumed</span> <span class="p">&gt;</span> <span class="m">0</span> <span class="p">-&gt;</span> <span class="n">animateHide</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">-&gt;</span> <span class="n">animateShow</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>whenはJavaでいうSwitch文に近いですが、上記のようにwhenの後に条件を付けなかったり、変数の型のcase文に出来たりとめちゃくちゃ気持ちよくなれます。</p>

<h2>式</h2>

<p>Kotlinではifやwhenなど諸々が式です。</p>

<p>例えば、ifの結果を変数に代入する場合、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">foo</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">foo</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">foo</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>kotlinではこんな感じになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">foo</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="m">10</span>
</span><span class='line'><span class="p">}</span>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="m">100</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>単純な場合、<code>{}</code>は省略するので一行で書くことが多いです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">foo</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="m">10</span> <span class="k">else</span> <span class="m">100</span>
</span></code></pre></td></tr></table></div></figure>


<p>条件により違った値を代入しているのですが<code>val</code>で定義出来るのがポイントです。</p>

<p>ちなみに、<a href="https://github.com/hotchemi/PermissionsDispatcher">PermissionsDispatcher</a>さんでも利用していて、メソッドの引数として使ったりもしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">builder</span><span class="p">.</span><span class="n">beginControlFlow</span><span class="p">(</span><span class="s">&quot;if (\$N\$T.shouldShowRequestPermissionRationale(\$N, \$N))&quot;</span><span class="p">,</span> <span class="k">if</span> <span class="p">(</span><span class="n">isPositiveCondition</span><span class="p">)</span> <span class="s">&quot;&quot;</span> <span class="k">else</span> <span class="s">&quot;!&quot;</span><span class="p">,</span> <span class="n">PERMISSION_UTILS</span><span class="p">,</span> <span class="n">targetParam</span><span class="p">,</span> <span class="n">permissionField</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ネストさせることも出来るのですが、複雑になるので見にくい場合はローカル変数に切り出すのが良いと思います。</p>

<h2>Annotation</h2>

<p>Dagger2を使う場合、ActivityやFragmentスコープを作るために独自Annotation作ったりします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Scope</span>
</span><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">ActivityScope</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>@interface</code>というキーワードを使っていましたが、Kotlinでは<code>annotation</code>と表現します。直感的で良いです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Scope</span>
</span><span class='line'><span class="n">@Retention</span>
</span><span class='line'><span class="k">annotation</span> <span class="k">class</span> <span class="nc">ActivityScope</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Retention</code>のデフォルト値が<code>RetentionPolicy.RUNTIME</code>なので、指定を省略出来るのもスッキリしていて気持ち良いです。</p>

<h2>Singleton</h2>

<p>Javaでは(簡易的な)シングルトンを作成する場合、以下のように書く必要がありました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MoshiUtil</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Moshi</span> <span class="n">moshi</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Moshi</span> <span class="nf">getMoshi</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">moshi</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">moshi</span> <span class="o">=</span> <span class="n">Moshi</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">DateAdapter</span><span class="o">()).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">moshi</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinでは、<code>object</code>として定義すればアプリ内でシングルトンとして利用可能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">object</span> <span class="nc">MoshiUtil</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">moshi</span><span class="p">:</span> <span class="n">Moshi</span> <span class="k">by</span> <span class="n">lazy</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Moshi</span><span class="p">.</span><span class="n">Builder</span><span class="p">().</span><span class="n">add</span><span class="p">(</span><span class="n">DateAdapter</span><span class="p">()).</span><span class="n">build</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使い方もJavaの時と同じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">MoshiUtil</span><span class="p">.</span><span class="n">moshi</span><span class="p">.</span><span class="n">adapter</span><span class="p">(</span><span class="n">BlackjackHand</span><span class="o">::</span><span class="n">java</span><span class="p">.</span><span class="k">class</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>rx.ObservableのThread指定方法</h2>

<p>ちょこっとしたことなのですが、Rxの実行スレッド方法の指定も気持ちよく書けるようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">load</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
</span><span class='line'>  <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
</span><span class='line'>  <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinの拡張プロパティを利用し、スレッドの指定方法を定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="err">&lt;</span><span class="py">T</span><span class="p">&gt;</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">observeOnUI</span><span class="p">:</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">observeOn</span><span class="p">(</span><span class="n">AndroidSchedulers</span><span class="p">.</span><span class="n">mainThread</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="err">&lt;</span><span class="py">T</span><span class="p">&gt;</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">observeOnIO</span><span class="p">:</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">observeOn</span><span class="p">(</span><span class="n">Schedulers</span><span class="p">.</span><span class="n">io</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="err">&lt;</span><span class="py">T</span><span class="p">&gt;</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">observeOnComputation</span><span class="p">:</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">observeOn</span><span class="p">(</span><span class="n">Schedulers</span><span class="p">.</span><span class="n">computation</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="err">&lt;</span><span class="py">T</span><span class="p">&gt;</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">subscribeOnUI</span><span class="p">:</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">subscribeOn</span><span class="p">(</span><span class="n">AndroidSchedulers</span><span class="p">.</span><span class="n">mainThread</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="err">&lt;</span><span class="py">T</span><span class="p">&gt;</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">subscribeOnIO</span><span class="p">:</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">subscribeOn</span><span class="p">(</span><span class="n">Schedulers</span><span class="p">.</span><span class="n">io</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="err">&lt;</span><span class="py">T</span><span class="p">&gt;</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">subscribeOnComputation</span><span class="p">:</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">subscribeOn</span><span class="p">(</span><span class="n">Schedulers</span><span class="p">.</span><span class="n">computation</span><span class="p">()).</span><span class="n">unsubscribeOn</span><span class="p">(</span><span class="n">Schedulers</span><span class="p">.</span><span class="n">computation</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>この拡張プロパティを利用すると以下のように書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">load</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="n">subscribeOnIO</span>
</span><span class='line'>  <span class="p">.</span><span class="n">observeOnIO</span>
</span><span class='line'>  <span class="p">.</span><span class="n">subscribe</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DatabindingのBindingAdapter指定方法</h2>

<p>DatabindingのBindingAdapterの<a href="https://developer.android.com/reference/android/databinding/BindingAdapter.html">公式ドキュメントのコード</a>をKotlinで書いてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@BindingAdapter</span><span class="o">(</span><span class="s">&quot;android:bufferType&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setBufferType</span><span class="o">(</span><span class="n">TextView</span> <span class="n">view</span><span class="o">,</span> <span class="n">TextView</span><span class="o">.</span><span class="na">BufferType</span> <span class="n">bufferType</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">view</span><span class="o">.</span><span class="na">getText</span><span class="o">(),</span> <span class="n">bufferType</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これがこんな感じになります。<code>view</code>が消えました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@BindingAdapter</span><span class="o">(</span><span class="s">&quot;android:bufferType&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">fun</span> <span class="n">TextView</span><span class="o">.</span><span class="na">setBufferType</span><span class="o">(</span><span class="n">TextView</span><span class="o">.</span><span class="na">BufferType</span> <span class="n">bufferType</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setText</span><span class="o">(</span><span class="n">getText</span><span class="o">(),</span> <span class="n">bufferType</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DatabindingのonClickなどのイベント指定方法</h2>

<p>これも拡張メソッドでいきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;android.support.design.widget.FloatingActionButton</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_marginTop=</span><span class="s">&quot;@dimen/spacing&quot;</span>
</span><span class='line'>                <span class="na">android:onClick=</span><span class="s">&quot;@{viewModel::onClickTopFab}&quot;</span>
</span><span class='line'>                <span class="na">app:backgroundTint=</span><span class="s">&quot;@color/action_green&quot;</span>
</span><span class='line'>                <span class="na">app:fabSize=</span><span class="s">&quot;normal&quot;</span>
</span><span class='line'>                <span class="na">app:layout_anchor=</span><span class="s">&quot;@id/app_bar&quot;</span>
</span><span class='line'>                <span class="na">app:layout_anchorGravity=</span><span class="s">&quot;bottom|end&quot;</span>
</span><span class='line'>                <span class="na">app:srcCompat=</span><span class="s">&quot;@drawable/plus&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">onClickFab</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">view</span><span class="o">.</span><span class="na">getContext</span><span class="o">(),</span> <span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">message_fab</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>kotlinではこんな感じ。Toast表示用の拡張メソッドも定義しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">View</span><span class="p">.</span><span class="n">onClickFab</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Toast</span><span class="p">.</span><span class="n">makeText</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">message_fab</span><span class="p">,</span> <span class="n">Toast</span><span class="p">.</span><span class="n">LENGTH_LONG</span><span class="p">).</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちょっと手が滑ると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Context</span><span class="p">.</span><span class="n">showLongToast</span><span class="p">(</span><span class="n">@StringRes</span> <span class="n">id</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Toast</span><span class="p">.</span><span class="n">makeText</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">Toast</span><span class="p">.</span><span class="n">LENGTH_LONG</span><span class="p">).</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">View</span><span class="p">.</span><span class="n">onClickFab</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">context</span><span class="p">.</span><span class="n">showLongToast</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">message_fab</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>topレベルの拡張メソッドは用法・用量を守って正しくお使い下さい。</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2>createIntent/newInstance</h2>

<p>自分はcreateIntent/newInstanceパターン大好きです。</p>

<p>これも気持ちよくなれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Intent</span> <span class="nf">createIntent</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">MyActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">intent</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>applyを使って、一行に。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">companion</span> <span class="k">object</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">createIntent</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="p">=</span> <span class="n">Intent</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">MyActivity</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>newInstanceもやってみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">SimpleDialogFragment</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">MyPacel</span> <span class="n">entity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SimpleDialogFragment</span> <span class="n">fragment</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleDialogFragment</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Bundle</span> <span class="n">bundle</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Bundle</span><span class="o">();</span>
</span><span class='line'>    <span class="n">bundle</span><span class="o">.</span><span class="na">putParcelable</span><span class="o">(</span><span class="n">PARCELABLE_KEY</span><span class="o">,</span> <span class="n">entity</span><span class="o">);</span>
</span><span class='line'>    <span class="n">fragment</span><span class="o">.</span><span class="na">setArguments</span><span class="o">(</span><span class="n">bundle</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">fragment</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>パラメータセットしたインスタンスを作りたいだけなのですが、結構冗長的で辛い。。。</p>

<p>Kotlinで短くしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">newInstance</span><span class="p">(</span><span class="n">entity</span><span class="p">:</span> <span class="n">MyPacel</span><span class="p">)</span> <span class="p">=</span>
</span><span class='line'>　   <span class="n">SimpleDialogFragment</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">arguments</span> <span class="p">=</span> <span class="n">Bundle</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>             <span class="n">putParcelable</span><span class="p">(</span><span class="n">PARCELABLE_KEY</span><span class="p">,</span> <span class="n">entity</span><span class="p">)</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>     <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>nestが激しいのでバラしていきます。まずはこの部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">arguments</span> <span class="p">=</span> <span class="n">Bundle</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">putParcelable</span><span class="p">(</span><span class="n">PARCELABLE_KEY</span><span class="p">,</span> <span class="n">entity</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをメソッド化すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">entity</span><span class="p">(</span><span class="n">bundle</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">,</span> <span class="n">entity</span><span class="p">:</span> <span class="n">MyPacel</span><span class="p">):</span> <span class="n">Bundle</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">bundle</span><span class="p">.</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">putParcelable</span><span class="p">(</span><span class="n">PARCELABLE_KEY</span><span class="p">,</span> <span class="n">entity</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>bundle変数に関する処理なので、Bundleの拡張メソッドと考えると良さ気。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">Bundle</span><span class="p">.</span><span class="n">entity</span><span class="p">(</span><span class="n">entity</span><span class="p">:</span> <span class="n">MyPacel</span><span class="p">):</span> <span class="n">Bundle</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">putParcelable</span><span class="p">(</span><span class="n">PARCELABLE_KEY</span><span class="p">,</span> <span class="n">entity</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>return文一文なので、省略。thisも必要ないので、省略。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">Bundel</span><span class="p">.</span><span class="n">entity</span><span class="p">(</span><span class="n">entity</span><span class="p">:</span> <span class="n">MyPacel</span><span class="p">)</span> <span class="p">=</span> <span class="n">apply</span> <span class="p">{</span> <span class="n">putParcelable</span><span class="p">(</span><span class="n">PARCELABLE_KEY</span><span class="p">,</span> <span class="n">entity</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>イマココ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">newInstance</span><span class="p">(</span><span class="n">entity</span><span class="p">:</span> <span class="n">MyPacel</span><span class="p">)</span> <span class="p">=</span>
</span><span class='line'>     <span class="n">SimpleDialogFragment</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">arguments</span> <span class="p">=</span> <span class="n">Bundle</span><span class="p">().</span><span class="n">entity</span><span class="p">(</span><span class="n">entity</span><span class="p">)</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">Bundel</span><span class="p">.</span><span class="n">entity</span><span class="p">(</span><span class="n">entity</span><span class="p">:</span> <span class="n">MyPacel</span><span class="p">)</span> <span class="p">=</span> <span class="n">apply</span> <span class="p">{</span> <span class="n">putParcelable</span><span class="p">(</span><span class="n">PARCELABLE_KEY</span><span class="p">,</span> <span class="n">entity</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>SimpleDialogFragmentの部分も同じように拡張メソッドを使って書くと。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">newInstance</span><span class="p">(</span><span class="n">entity</span><span class="p">:</span> <span class="n">MyPacel</span><span class="p">)</span> <span class="p">=</span> <span class="n">MyFragment</span><span class="p">().</span><span class="n">entity</span><span class="p">(</span><span class="n">entity</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">MyFragment</span><span class="p">.</span><span class="n">entity</span><span class="p">(</span><span class="n">entity</span><span class="p">:</span> <span class="n">MyPacel</span><span class="p">)</span> <span class="p">=</span> <span class="n">apply</span> <span class="p">{</span> <span class="n">arguments</span> <span class="p">=</span> <span class="n">Bundle</span><span class="p">().</span><span class="n">entity</span><span class="p">(</span><span class="n">entity</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">Bundle</span><span class="p">.</span><span class="n">entity</span><span class="p">(</span><span class="n">entity</span><span class="p">:</span> <span class="n">MyPacel</span><span class="p">)</span> <span class="p">=</span> <span class="n">apply</span> <span class="p">{</span> <span class="n">putParcelable</span><span class="p">(</span><span class="n">KEY</span><span class="p">,</span> <span class="n">entity</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>だいぶシンプルになりました。ヨイヨヨイヨ。</p>

<h2>setVisibleOrGone</h2>

<p>Databinding前には結構使うことが多かったのですが、今となっては・・・でも一応。</p>

<p>Viewを消してしまうか表示するかをBoolean値で判別するようなUtil系のメソッドを書くとすると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setVisibleOrGone</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isVisible</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">view</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">isVisible</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">view</span><span class="o">.</span><span class="na">setVisiblity</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">view</span><span class="o">.</span><span class="na">setVisiblity</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">GONE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをkotlinで書くと一行でいけます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">View</span><span class="o">?.</span><span class="n">setVisibleOrGone</span><span class="p">(</span><span class="n">isVisible</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">?.</span><span class="n">visibility</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">isVisible</span><span class="p">)</span> <span class="n">View</span><span class="p">.</span><span class="n">VISIBLE</span> <span class="k">else</span> <span class="n">View</span><span class="p">.</span><span class="n">GONE</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>nullableのViewの拡張メソッド、null安全、setter/getterの省略、if式利用と色々Javaにはない機能を利用しています。</p>

<h2>BaseObservable</h2>

<p>公式にある、以下のコードをKotlinで気持ちよく書いてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="n">BaseObservable</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>   <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>   <span class="nd">@Bindable</span>
</span><span class='line'>   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getFirstName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">firstName</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="nd">@Bindable</span>
</span><span class='line'>   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getLastName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">lastName</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFirstName</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>       <span class="n">notifyPropertyChanged</span><span class="o">(</span><span class="n">BR</span><span class="o">.</span><span class="na">firstName</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLastName</span><span class="o">(</span><span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>       <span class="n">notifyPropertyChanged</span><span class="o">(</span><span class="n">BR</span><span class="o">.</span><span class="na">lastName</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinで書く前に、そもそも具体的にやることは以下</p>

<ul>
<li>getterに<code>@Bindable</code>をつける</li>
<li>setterの最後に<code>notifyPropertyChanged(BR.firstName);</code>を呼ぶ</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="p">:</span> <span class="n">BaseObservable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">@get</span><span class="p">:</span><span class="n">Bindable</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">firstName</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">field</span> <span class="p">=</span> <span class="n">value</span>
</span><span class='line'>            <span class="n">notifyPropertyChanged</span><span class="p">(</span><span class="n">BR</span><span class="p">.</span><span class="n">firstName</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">@get</span><span class="p">:</span><span class="n">Bindable</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">lastName</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">field</span> <span class="p">=</span> <span class="n">value</span>
</span><span class='line'>            <span class="n">notifyPropertyChanged</span><span class="p">(</span><span class="n">BR</span><span class="p">.</span><span class="n">lastName</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>setter/getterを書かなくて良いのでシンプルになってます。</p>

<p>もうちょいキレイになればいいですが、わざわざメソッド書かなくて良いというだけでも気持ちいいです。</p>

<h2>Delegate</h2>

<p>継承するな！移譲しろ！と言われてもJava使ってると継承しちゃいガチなのですが、KotlinのDelegateがあるとこれを積極的に利用したいなと思えるようになります。</p>

<p>ViewModelにRxのSubscriptionの機能を実装し、<code>Activity#onDestroy</code>時に<code>unsubscribe()</code>したいという時</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nf">MyViewModel</span><span class="o">(</span><span class="n">CompositeSubscription</span> <span class="n">compositeSubscription</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">unsubscribe</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">compositeSubscription</span><span class="o">.</span><span class="na">unsubscribe</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinでdelegateすると<code>unsubscribe()</code>は書かなくて良くなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">MyViewModel</span> <span class="n">@Inject</span> <span class="n">constructor</span><span class="p">(</span><span class="k">var</span> <span class="py">compositeSubscription</span><span class="p">:</span> <span class="n">CompositeSubscription</span><span class="p">)</span> <span class="p">:</span> <span class="n">Subscription</span> <span class="k">by</span> <span class="n">compositeSubscription</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Activityではこんな感じ。<code>MyViewModel</code>で実装していないのに<code>unsubscribe()</code>を呼ぶことが出来る。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">ThirdActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">@field</span><span class="p">:[</span><span class="n">Inject</span><span class="p">]</span>
</span><span class='line'>    <span class="n">lateinit</span> <span class="k">var</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">MyViewModel</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onDestroy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onDestroy</span><span class="p">()</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">unsubscribe</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>droidkaigi2016の<a href="https://github.com/konifar/droidkaigi2016/blob/master/app/src/main/java/io/github/droidkaigi/confsched/widget/ArrayRecyclerAdapter.java">ArrayRecyclerAdapter</a>を以下のようなにすることもできるけど、余計なメソッドも生えるので、用法と用量を(省略</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">MutableListRecyclerAdapter</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">VH</span> <span class="p">:</span> <span class="n">RecyclerView</span><span class="p">.</span><span class="n">ViewHolder</span><span class="p">&gt;(</span><span class="k">private</span> <span class="k">val</span> <span class="py">list</span><span class="p">:</span> <span class="n">MutableList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="p">:</span>
</span><span class='line'>        <span class="n">RecyclerView</span><span class="p">.</span><span class="n">Adapter</span><span class="p">&lt;</span><span class="n">VH</span><span class="p">&gt;(),</span> <span class="n">Iterable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;,</span> <span class="n">MutableList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">by</span> <span class="n">list</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">itemClickListener</span><span class="p">:</span> <span class="n">View</span><span class="p">.</span><span class="n">OnClickListener</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">getItemCount</span><span class="p">()</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">@UiThread</span> <span class="k">fun</span> <span class="nf">addAllWithNotification</span><span class="p">(</span><span class="n">items</span><span class="p">:</span> <span class="n">Collection</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">position</span> <span class="p">=</span> <span class="n">itemCount</span>
</span><span class='line'>        <span class="n">addAll</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'>        <span class="n">notifyItemChanged</span><span class="p">(</span><span class="n">position</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">@UiThread</span> <span class="k">fun</span> <span class="nf">reset</span><span class="p">(</span><span class="n">items</span><span class="p">:</span> <span class="n">Collection</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">clear</span><span class="p">()</span>
</span><span class='line'>        <span class="n">addAll</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'>        <span class="n">notifyDataSetChanged</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>遅延初期化</h2>

<p>Javaで簡単にやる場合、getterを作成し、propertyアクセスは禁止し、そのgetter経由で値を取得するというルールの下かろうじて出来る遅延初期化処理です。</p>

<p>例えば、Databindingの<code>setContentView</code>を利用して、<code>binding</code>変数を初期化します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">MyBinding</span> <span class="n">binding</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">MyBinding</span> <span class="nf">getBinding</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">binding</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">binding</span> <span class="o">=</span> <span class="n">DataBindingUtil</span><span class="o">.</span><span class="na">setContentView</span><span class="o">&lt;</span><span class="n">MyBinding</span><span class="o">&gt;(</span><span class="k">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">my</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">binding</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinでは<code>by lazy</code>を利用して書きます。一旦<code>binding</code>変数にアクセスしたら<code>by lazy</code>内の処理が実行され、初期化されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">binding</span> <span class="k">by</span> <span class="n">lazy</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DataBindingUtil</span><span class="p">.</span><span class="n">setContentView</span><span class="p">&lt;</span><span class="n">MyBinding</span><span class="p">&gt;(</span><span class="k">this</span><span class="p">,</span> <span class="n">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">my</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>valであるのも良いです。</p>

<p>ちなみに、enumに<code>ordinal</code>ではない数値のidを振ることがあって、そのidから逆引きしたい時にキャッシュした<code>SparseArray</code>を利用して逆引きしますが、この時も<code>by lazy</code>使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">companion</span> <span class="k">object</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">lookup</span><span class="p">:</span> <span class="n">SparseArray</span><span class="p">&lt;</span><span class="n">MyType</span><span class="p">&gt;</span> <span class="k">by</span> <span class="n">lazy</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">SparseArray</span><span class="p">&lt;</span><span class="n">MyType</span><span class="p">&gt;().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">EnumSet</span><span class="p">.</span><span class="n">allOf</span><span class="p">(</span><span class="n">MyType</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">).</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="n">@apply</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">typeId</span><span class="p">,</span> <span class="n">it</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">fromTypeId</span><span class="p">(</span><span class="n">typeId</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">MyType</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">lookup</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">typeId</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>parameter name</h2>

<p>Javaではそもそも出来ないのですが、こんなPOJOクラスがあったとします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="n">firstName</span><span class="o">,</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// その他メソッド省略</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">&quot;名&quot;</span><span class="o">,</span> <span class="s">&quot;姓&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">&quot;姓&quot;</span><span class="o">,</span> <span class="s">&quot;名&quot;</span><span class="o">);</span> <span class="c1">// 間違っているけど、コンパイルOK</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一引数と第二引数がfirstなのか、lastなのかわからなくなります。ランタイムでしか検知できないのが辛いです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">User</span><span class="p">(</span><span class="n">firstName</span> <span class="p">=</span> <span class="s">&quot;名&quot;</span><span class="p">,</span> <span class="n">lastName</span> <span class="p">=</span> <span class="s">&quot;姓&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>引数に名前を設定して、メソッドを呼び出せます。こんなことしても叱られませんし、間違った挙動を起こしません。同じような型が多いメソッド呼び出しでは積極的に使うと気持ち良いです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">User</span><span class="p">(</span><span class="n">lastName</span> <span class="p">=</span> <span class="s">&quot;姓&quot;</span><span class="p">,</span> <span class="n">firstName</span> <span class="p">=</span> <span class="s">&quot;名&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>最後に</h2>

<p>リストアップしてみたら結構出てきました。。。</p>

<p>落選した項目は<a href="https://gist.github.com/shiraji/2caf8190d282ab3594a21b467980267e">gist</a>で公開しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Contribute R.swift (for Japanese Android Engineer)]]></title>
    <link href="http://shiraji.github.io/blog/2016/12/03/how-to-contribute-swift-library-r-dot-swift/"/>
    <updated>2016-12-03T00:00:00+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/12/03/how-to-contribute-swift-library-r-dot-swift</id>
    <content type="html"><![CDATA[<p>This entry is for Japanese speaker. Those who are interested to contribute R.swift, please refer to <a href="https://github.com/mac-cain13/R.swift/blob/master/Documentation/Contribute.md">this doc</a></p>

<p>これは<a href="http://qiita.com/advent-calendar/2016/ios">iOS Advent Calendar 2016</a>の12/3の記事です。</p>

<p>Swiftでprintlnを書いてハマるレベルのエンジニアが一週間(実稼働時間 約8時間)でR.swiftにコントリビュートしたお話。(だったけど、メンテナさんが別プロジェクト始めちゃってまだマージされていない。-> この記事の翌日2016/12/04にマージされましたー！)</p>

<p>Swift開発している人にとっては常識な話が多数だと思いますが、Android開発やKotlin触っていて、Swiftもやってみたい！とかSwiftのライブラリ開発してみたい！という人向けです。R.swiftのコントリビュート方法として紹介していますが、他のライブラリも同じ感じなのではないかなーと思ってます。</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>想定読者</h1>

<ul>
<li>Android開発やKotlin触っていいて、iOSの開発も興味がある</li>
<li>Swiftのライブラリにコントリビュートしてみたいけど、したことがない</li>
</ul>


<p>申し訳ないですが、iOS/Swift開発経験が長い人は想定外です。</p>

<h1>自己紹介</h1>

<p>Kotlinが好きなAndroidエンジニアです。</p>

<ul>
<li>Swift力: printlnとか書いて、コンパイルエラーになって、なんでや？って悩むくらい</li>
<li>Xcode力: 新規ファイル作成は任せろ！</li>
<li>その他: cocoapodは知ってた。ObjCは書いたことあったけど、ブランクが2年ほどある。</li>
</ul>


<p>iOS開発は素人に毛が生えた程度のレベルの人間ということです。</p>

<h1>経緯</h1>

<ul>
<li>Swift3の勉強したい。</li>
<li>あ、そういえば、こんな<a href="http://shiraji.github.io/blog/2016/01/10/pull_req_study/">記事</a>が・・・</li>
<li>やるか！</li>
</ul>


<h1>プロジェクト選定</h1>

<p>プルリク駆動開発のルールは以下です。</p>

<ul>
<li>GitHubのスターが500以上。出来れば5000以上</li>
<li>開発が活発</li>
<li>Issueがラベルなどで管理されている</li>
<li>放置されているpull requestが少ない</li>
<li>GitHubで完結している</li>
<li>使ったことあるなしは気にしない</li>
</ul>


<p>これに則って、勉強できそうな星多いライブラリを探してみました。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> ライブラリ概要 </th>
<th style="text-align:center;"> 検討した理由 </th>
<th style="text-align:left;"> 検討結果 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"><a href="https://github.com/ikesyo/Himotoki">Himotoki</a></td>
<td style="text-align:center;">タイプセーフなJSONデコードライブラリ</td>
<td style="text-align:center;">メンテナーが日本人のikesyoさんという安心感から。<br>(恐れ多くて関わったことがないのですが・・・)</td>
<td style="text-align:left;">issueなし！(スゲェ・・・</td>
</tr>
<tr>
<td style="text-align:center;"><a href="https://github.com/onevcat/Kingfisher">Kingfisher</a></td>
<td style="text-align:center;">Imageのダウンロード・キャッシングライブラリ</td>
<td style="text-align:center;">なんか名前がかっこよかった</td>
<td style="text-align:left;">開発活発○<br>ラベリングがない☓</td>
</tr>
<tr>
<td style="text-align:center;"><a href="https://github.com/Alamofire/Alamofire">Alamofire</a></td>
<td style="text-align:center;">Swift版HTTPネットワーク</td>
<td style="text-align:center;">Swiftやるならこれでしょという短絡的な発想</td>
<td style="text-align:left;">開発活発○<br>ラベリングあり○<br>メインテナー多そう○<br>HTTP周りの知識必須っぽい△</td>
</tr>
<tr>
<td style="text-align:center;"><a href="https://github.com/mac-cain13/R.swift">R.swift</a></td>
<td style="text-align:center;">コンパイルタイムでコード生成<br>Androidで言うRクラスを使えるようにするライブラリ</td>
<td style="text-align:center;">自分がAndroid出身者だから</td>
<td style="text-align:left;">開発活発○<br>ラベリングがしっかり○<br>メインテナーが複数いるっぽい○<br>自分が持っている知識でいけるっぽい○</td>
</tr>
</tbody>
</table>


<p>ということで今回は<a href="https://github.com/mac-cain13/R.swift">R.swift</a>を選択しました。</p>

<h1>実際に勉強出来た事</h1>

<p>今回のコントリビュートで以下の項目を勉強しました。</p>

<ul>
<li>ライブラリのビルド方法</li>
<li>サンプルアプリのビルド方法</li>
<li>Swiftの文法(optional/guard/コレクション処理など)</li>
<li>Cライブラリ/Cコードの導入方法</li>
<li>リフレクション?(Mirror)</li>
<li>XCTestの書き方</li>
</ul>


<p>なかなか濃い一週間でした。</p>

<h2>ライブラリのビルド方法</h2>

<p>ここをrswiftに変える。</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-contribute-swift-library-r-dot-swift/change_to_rswift_scheme.png" alt="change_to_rswift_scheme.png" /></p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-contribute-swift-library-r-dot-swift/change_scheme.png" alt="change_scheme.png" /></p>

<p>Runではなく、BuildでOK</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-contribute-swift-library-r-dot-swift/build_rswift.png" alt="build_rswift.png" /></p>

<h2>サンプルアプリのビルド方法</h2>

<p>ここをResourceAppに変える。</p>

<p><img src="https://raw.githubusercontent.com/wiki/shiraji/images/blog/images/how-to-contribute-swift-library-r-dot-swift/change_to_rswift_scheme2.png" alt="change_to_rswift_scheme2.png" /></p>

<p>ライブラリのコード内に<code>print()</code>を書けば<code>rswift.log</code>というところにログが出力されるように設定されています。これを利用して、変更を確認していきます。</p>

<h2>Swiftの文法</h2>

<p>自分は本を読んで勉強するというタイプではなく、try-errorで実際に触って勉強するタイプです。</p>

<p>Swiftの文法も書きながら覚えていきましたが、ちょくちょくこれどうやればいいの？っていうのにぶつかりました。特にKotlinのsmartcastの知識が邪魔してきました。。。<code>if let guard</code>などは文法が結構特殊なので最後まで慣れませんでした。あと、一番の問題はSwift3を調べたいのですが、大量にSwift2などの古い日本語ドキュメントが出てきます。iOS開発者辛いなーという感じでした。OptionalもコンセプトはKotlinと似ているのですが・・・。この辺りでKotlinとSwiftが似ていると言っていた人を罵りたくなってました。</p>

<p>コレクション処理に関してはRubyやJava8、Kotlinなど他の言語でもよくあるものなので、そこまで苦しまなかったです。</p>

<h2>Cライブラリ/Cコードの導入方法</h2>

<p>残念ながら今回採用はしなかったのですが、Cコードの導入を試みました。</p>

<p>Androidであれば、NDKを入れて、Cコードとjnlを用意してーと本当に多くのことをやらないとCコードを利用することは出来ません。iOS開発のこれは強みで、比較的簡単に利用出来ます。</p>

<p>導入方法としては</p>

<ol>
<li>.h/.cファイルをプロジェクトに追加します。今回は<code>wildmatch.h</code>/<code>wildmatch.c</code></li>
<li>rswift-Bridging-Header.hファイルを作成し、利用したい.hをimportします。<code>#import "wildmatch.h"</code></li>
<li>Swiftで<code>wildmatch.h</code>にあるメソッドを呼び出します</li>
</ol>


<p>こんなことで利用出来てしまうんか！と驚愕しました。Xcodeのコンテントアシストにも即時反映されるし、驚きっぱなしでした。</p>

<h2>リフレクション?(Mirror)</h2>

<p>SwiftにもJavaのリフレクションがありました。<code>Mirror</code>というクラスを利用します。実はこれ使い方が間違っていたのかうまく動きませんでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">imageMirror</span> <span class="o">=</span> <span class="n">Mirror</span><span class="p">(</span><span class="nl">reflecting</span><span class="p">:</span> <span class="n">R</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">imageMirror</span><span class="p">.</span><span class="n">children</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="c1">// show 0.</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにこのコードであれば動きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">imageMirror</span> <span class="o">=</span> <span class="n">Mirror</span><span class="p">(</span><span class="nl">reflecting</span><span class="p">:</span> <span class="n">R</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">settings</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">imageMirror</span><span class="p">.</span><span class="n">children</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="c1">// show children count.</span>
</span></code></pre></td></tr></table></div></figure>


<p>たぶんselfとかのせいだろうなーと思いましたが、深追いはせず。</p>

<h2>XCTestの書き方</h2>

<p>ざっくりですが、JUnit3とほぼ同じです。</p>

<ul>
<li><code>setup</code>/<code>tearDown</code>メソッドが存在している</li>
<li><code>test</code>prefixをそれぞれのテストメソッドにつける</li>
</ul>


<p>BuildしたところにTestという選択肢があるので、それを選らんで実行。Java開発に慣れているなら特に問題なかったです。</p>

<p>ある程度開発した後に気づいたので、今回は利用しなかったのですが、XCTestでのTDD開発も可能です。たぶんそちらのほうが推奨されているのではないでしょうか。</p>

<h1>苦戦したところ</h1>

<p>メンテナさんにも指摘を受けたのですが、やっぱりところどころSwiftらしくない書き方をしてしまっているようです。たぶんKotlinの癖が出ているのではないかと。まだSwift力が低すぎてどこのことを言っているのか不明でした。</p>

<p>また、Swiftの<code>if let</code>や<code>guard</code>には結構苦戦しました。例えば今回こんな感じで、<code>ignoreFile</code>という変数を初期化するコードを書きました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>  <span class="k">if</span> <span class="k">let</span> <span class="n">rswiftignoreURL</span> <span class="o">=</span> <span class="n">callInformation</span><span class="p">.</span><span class="n">rswiftignoreURL</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ignoreFile</span> <span class="o">=</span> <span class="n">try</span> <span class="n">IgnoreFile</span><span class="p">(</span><span class="nl">ignoreFileURL</span><span class="p">:</span> <span class="n">rswiftignoreURL</span><span class="p">)</span> <span class="c1">// Exceptionキャッチは別途している</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ignoreFile</span> <span class="o">=</span> <span class="n">IgnoreFile</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>let rswiftignoreURL</code>が</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">rswiftignoreURL</span> <span class="o">=</span> <span class="n">callInformation</span><span class="p">.</span><span class="n">rswiftignoreURL</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ignoreFile</span> <span class="o">=</span> <span class="n">try</span> <span class="n">IgnoreFile</span><span class="p">(</span><span class="nl">ignoreFileURL</span><span class="p">:</span> <span class="n">rswiftignoreURL</span><span class="p">)</span> <span class="c1">// Exceptionキャッチは別途している</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このスコープ内で使えることに違和感がありました。</p>

<p>Kotlinの場合は<code>?.let</code>を利用した場合、lambdaの<code>{}</code>内で変数定義します。(上記Swiftコードは<code>else</code>もあるので再現するには、<code>?.let</code>ではだめだけど。あと<code>it</code>もあるけど、それは省略。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">ignoreFile</span> <span class="p">=</span> <span class="n">callInformation</span><span class="p">.</span><span class="n">rswiftignoreURL</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">ignoreFileURL</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="n">IgnoreFile</span><span class="p">(</span><span class="n">ignoreFileURL</span><span class="p">:</span> <span class="n">ignoreFileURL</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>最後に</h1>

<p>メインテナさんがPR投げてから、昇華していこうぜスタイルの自分にとって理想的な人でした。彼？のおかげで、わかる点までやってみて結果を貼って、質問するスタイルで勉強しつつコードを完成させることが出来ました。</p>

<p>みんな使ってね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for Creating Intellij Plugin in Kotlin]]></title>
    <link href="http://shiraji.github.io/blog/2016/09/18/create-intellij-plugin-2/"/>
    <updated>2016-09-18T21:14:03+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/09/18/create-intellij-plugin-2</id>
    <content type="html"><![CDATA[<p>This is the second blog post for &ldquo;Tips of creating Intellij plugin&rdquo;.</p>

<p>This entry is focus on tips for creating intellij plugin in Kotlin. (But I still believe it is useful for Java developers.)</p>

<p>For more basic tips, please read <a href="http://shiraji.github.io/blog/2016/03/28/create-intellij-plugin/">Tips for Creating Intellij Plugin</a></p>

<h1>Topics</h1>

<ul>
<li>How to find parent</li>
<li>How to find children</li>
<li>How to find files</li>
</ul>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>How to find parent</h1>

<p>Finding parent is just calling <code>PsiElement#getParent()</code>. However, in most case, I want to find a specific type of parent. In that case, using extension methods in <code>psiUtils.kt</code> is the best way to do it. <a href="https://github.com/shiraji/kotlin/blob/1.0.3/compiler/frontend/src/org/jetbrains/kotlin/psi/psiUtil/psiUtils.kt#L115-L129">psiUtils.kt</a> provides variety of useful extension methods.</p>

<p>For instance, if I want to find the function that the element belong,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">parentFunc</span> <span class="p">=</span> <span class="n">element</span><span class="p">.</span><span class="n">getStrictParentOfType</span><span class="p">&lt;</span><span class="n">KtNamedFunction</span><span class="p">&gt;()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method return <code>null</code> if there is no applicable element. (In the example, if the element is not located inside a function, it will be null.)</p>

<p>For Java developers, use <code>PsiTreeUtil.getParentOfType()</code></p>

<h1>How to find children</h1>

<p>After finding <code>psiUtils.kt</code>, I was expected to find children using something like <code>getStrictChildrenOfType</code> or something. Guess what. I was wrong. There are more useful methods in <a href="https://github.com/shiraji/kotlin/blob/1.0.3/compiler/frontend/src/org/jetbrains/kotlin/psi/psiUtil/psiUtils.kt#L173-L233">psiUtils.kt</a>. The reason why it is not <code>getStrictChildrenOfType</code> is I guess it requires to recursive tree visiting.</p>

<p>To find all children of specific types, use <code>collectDescendantsOfType</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">element</span><span class="p">.</span><span class="n">collectDescendantsOfType</span><span class="p">&lt;</span><span class="n">KtExpression</span><span class="p">&gt;()</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>To find existance of children of specific type, use <code>anyDescendantOfType</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">element</span><span class="p">.</span><span class="n">anyDescendantOfType</span><span class="p">&lt;</span><span class="n">KtNamedFunction</span><span class="p">&gt;()</span>
</span></code></pre></td></tr></table></div></figure>


<p>To find the one child of specific type, use <code>findDescendantOfType</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">element</span><span class="p">.</span><span class="n">findDescendantOfType</span><span class="p">&lt;</span><span class="n">KtFunctionLiteral</span><span class="p">&gt;()</span>
</span></code></pre></td></tr></table></div></figure>


<h1>How to find files</h1>

<p>When I want to iterate though all resource files in my project, following one liner archive it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">FileTypeIndex</span><span class="p">.</span><span class="n">getFiles</span><span class="p">(</span><span class="n">XmlFileType</span><span class="p">.</span><span class="n">INSTANCE</span><span class="p">,</span> <span class="n">ProjectScope</span><span class="p">.</span><span class="n">getProjectScope</span><span class="p">(</span><span class="n">project</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Watch out <code>.idea/</code> folder. It is also include as &ldquo;Project&rdquo; so this line also grabs all xml files in &ldquo;.idea&rdquo;.)</p>

<p>This method find all files in specific types of specific scope. The above line finds all xml files in my project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Kontribute (for Japanese)]]></title>
    <link href="http://shiraji.github.io/blog/2016/07/14/how-to-kontribute/"/>
    <updated>2016-07-14T13:07:08+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/07/14/how-to-kontribute</id>
    <content type="html"><![CDATA[<p>This entry is for Japanese. For English speaker, please refer <a href="https://github.com/JetBrains/kotlin">kotlin repo</a></p>

<h1>最初に</h1>

<p>kotlinにcontributeし始めました。ドキュメントに書いてない部分があったので、主に自分用になりますが、書いておきます。</p>

<p>この文章は2016/07に書かれたので、その後、contribute方法が変わっているかもしれません。</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>contributeする前に<a href="https://github.com/JetBrains/kotlin/blob/master/ReadMe.md">README</a>は必ず読み込んでください。</p>

<h1>開発環境</h1>

<h2>JDK周り</h2>

<p>特に、JDKの設定は複雑です。jdk1.6, 1.7, 1.8全てが必要で、それらをドキュメント通り指定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>JDK_17=`/usr/libexec/java_home -v 1.7`</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで設定していきました。</p>

<h3>Windows user</h3>

<p>自分はWindowsでの開発をしていないのですが、Windowsで開発する場合、JDKはOracleさんが出しているものが良いようです。</p>

<p>Macであれば、OpenJDKでもOrableのやつでもどちらでも問題なくビルドできるそうです。</p>

<h2>build</h2>

<p><strong>buildコマンドは2017/09/20にgradleを利用する大きな変更が入りました。時間が出来たら反映します。</strong></p>

<p>pullには結構時間かかります。buildコマンドはドキュメントにある通り、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ant -f update_dependencies.xml
</span><span class='line'>ant -f build.xml</span></code></pre></td></tr></table></div></figure>


<p>kotlin開発用プラグインのインストールも必要です。</p>

<p>全てが揃わない限り、ビルド出来ません。このあたりで断念するのはもったいないので、わからなければ、slackのkotlinlangのkontributorチャンネルで聞いてください。</p>

<p>kotlinlangのslackは<a href="https://kotlinlang.org/community.html%E3%81%93%E3%81%93%E3%81%AB%E8%A9%B3%E7%B4%B0%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82">https://kotlinlang.org/community.html%E3%81%93%E3%81%93%E3%81%AB%E8%A9%B3%E7%B4%B0%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82</a></p>

<h3>ANTの設定</h3>

<p>よくハマるのが、antの設定です。Heapサイズを増やさないとビルド出来ないことが多々発生します。</p>

<p>以下のように<code>ANT_OPTS</code>を設定して下さい。Xmxの数値は任意。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export ANT_OPTS="-Xmx2048m -XX:MaxPermSize=2048m"</span></code></pre></td></tr></table></div></figure>


<h2>run</h2>

<p>.idea/runConfigurationを見てもらうとわかるのですが、かなり多くのrun設定が含まれています。</p>

<p>ビルドが成功すれば、それらをrunするだけで、動きます。IDEAをrunすると自分の修正を取り込んだIntellijが立ち上がります。</p>

<h3>run test</h3>

<p>UnitテストもIDEAなどと同じでrun設定から起動します。</p>

<p>一つ一つのテストを起動することも出来ますが、working directoryがプロジェクトrootを指定しない限り動かないので注意。All IDEA Plugin Testsの設定を参考にしてください。</p>

<h3>Plugin &ldquo;GitHub&rdquo; was not loaded: required plugin &ldquo;Git4Idea&rdquo; not installed.</h3>

<p><code>ideaSDK/config-idea</code>の中身を全て消せばいいらしい。</p>

<p>でもそれで動くマシンと動かないマシンがあった。これに関しては謎。動かないマシンはもう一回環境構築しなおしてみます。</p>

<h4>追記</h4>

<p>理由がわかりました。テスト時にSDKに設定されているプラグインを全て読み込みます。</p>

<p><code>File &gt; Project Structure &gt; 1.8 &gt; Classpath</code></p>

<p>私の場合、ここに、CE版のgithubプラグインのパスが設定されていました。これを削除すると動くようになりました。</p>

<p>別プラグイン開発で使っていたものが残っていました。</p>

<h1>開発</h1>

<p>READMEにもありますが、kotlinにはまだまだいっぱいやることがあるので、contributeし放題です。</p>

<p><a href="https://youtrack.jetbrains.com/oauth?state=%2Fissues%2FKT%3Fq%3Dtag%3A%2520%257BUp%2520For%2520Grabs%257D%2520%2523Unresolved">YouTrack</a>からやりたいものを選んで下さい。</p>

<p>そのスレッドにやるわこれ！とコメントすると良いです。やっていいのかわからない場合は、kontributorチャンネルでやっていいか？という質問を投げて下さい。JetBrainsの営業時間になればだいたい回答が来ます。</p>

<h2>ブランチ名</h2>

<p>特にルールないらしい。なんでも良い。masterはさすがにマナー違反だと思う。</p>

<h2>コミットメッセージ</h2>

<p>あんまりルールがあるように見えない。<code>#KT-12345 Fixed</code>はつけたほうが良さ気。</p>

<h2>テスト</h2>

<p>基本書いたコードに対して考えられるケースのテストを書くことになる。<code>XxxTestGenerated</code>という名前のクラスはRun ConfigurationのGenerate Testsで自動生成されたテストケース。これらのテストケースは編集しない。</p>

<p>例えば、Inspectionのテストの場合、<a href="https://github.com/shiraji/kotlin/blob/1.0.3/idea/tests/org/jetbrains/kotlin/idea/codeInsight/InspectionTestGenerated.java">InspectionTestGenerated</a>があり、これにテストを追加するには<code>idea/testData/inspections</code>配下にフォルダを作成し、その下にテストデータを作成する。その後、"Generate Tests"を起動させると、テストケースが追加される。</p>

<h3>新規のUnit Test</h3>

<p>新規のUnit Testを書くことになるIssueもある。</p>

<p>その場合、通常通り、JUnitでテストを作成してもいいのだけど、<code>KotlinCodeInsightTestCase</code>を継承した、abstract classを作成し、<a href="https://github.com/shiraji/kotlin/blob/1.0.3/ultimate/tests/org/jetbrains/kotlin/tests/GenerateTests.kt">GenerateTests.kt</a>に追記すると、上記"Generate Tests"の対象となり、abstractクラスで作ったロジックに則った自動テストを作成することが出来る。</p>

<p>例えば、この<a href="https://github.com/JetBrains/kotlin/commit/391a0fdde5788ad7c8e854e7eba03a4e186256b5">PR</a>では<code>AbstractConcatenatedStringGeneratorTest</code>を作成して、<code>ConcatenatedStringGenerator</code>クラスをテストする自動テストケースを作成している。</p>

<h2>Pull Request</h2>

<p>特に気にせず投げてOK。</p>

<p>投げた後に、そのURLを対象のYouTrackのissueのコメントに貼り付けて欲しいとのこと。</p>

<h2>マージ</h2>

<p>マージはcherry-pick？でマージ先をJetBrainsの中の人がやってくれる。微修正までしてくれる。Authorは自分になる。(CommiterがJBの中の人。)</p>

<p>こんな感じ。</p>

<p><a href="https://github.com/JetBrains/kotlin/commits?author=shiraji">https://github.com/JetBrains/kotlin/commits?author=shiraji</a></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h1>ビルド出来なくなったら？</h1>

<p>kotlinプラグインは結構な頻度で更新されていきます。</p>

<p>急にビルド出来なくなった場合、まず、kotlinプラグインを最新のバージョンにしているのか確認して下さい。</p>

<p>また、masterにマージされているものが時々ビルドエラーを起こしたりします。こうなるとその修正が入るまで特に何も出来ません。我慢して待ちましょう！</p>

<p>ただ、2~3日ビルド出来ないというのは何かしら環境がおかしい場合があります。その時は以下の作業をしてみます。</p>

<ul>
<li><code>ideaSDK/config-idea</code>以下を削除する(Run時に使うプラグインを削除)</li>
<li><code>ant -f update_dependencies.xml</code>を実行する</li>
<li><code>ant dist</code>を実行する</li>
</ul>


<p>それでもだめならkontributorチャンネルで聞いてみましょう。</p>

<h1>雑感</h1>

<p>殺伐としておらず、やりたい！と手をあげたらやらせてくれる。ちょっとわかんね。となっても質問すれば教えてくれる。</p>

<p>kontributorチャンネルで聞けばだいたい問題は解決する。やってほしいIssueとかも聞けば答えてくれる。非常にやりやすい感じでした。</p>

<p>IDE周りは今まで結構コード書いてたり読んでたりしているので、引き続きcontributeしていこうかなと考えています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Create Intellij Custom Wizard]]></title>
    <link href="http://shiraji.github.io/blog/2016/07/11/create_intellij_wizard/"/>
    <updated>2016-07-11T13:22:11+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/07/11/create_intellij_wizard</id>
    <content type="html"><![CDATA[<p>Japanese text is following.(日本語は英語の下です。)</p>

<h1>Motivation</h1>

<p>When I created Intellij custom wizard called <a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard">gradle-intellij-plugin wizard</a>,
I read JetBrains <a href="http://www.jetbrains.org/intellij/sdk/docs/tutorials/project_wizard.html">official documentation</a>.
They explains how to <a href="http://www.jetbrains.org/intellij/sdk/docs/tutorials/project_wizard/module_types.html">support module types</a> and <a href="http://www.jetbrains.org/intellij/sdk/docs/tutorials/project_wizard/adding_new_steps.html">how to add new steps</a>.
However, what I want to know is how to add custom fields, how to add custom files, and how to customize files based on custom fields.</p>

<p>There is no such documentation at this point, so I decided to write this entry for me.</p>

<h1>Topics</h1>

<ul>
<li>How to add custom view</li>
<li>How to get the user input in <code>ModuleWizardStep</code></li>
<li>How to create a file</li>
<li>How to change the file contents</li>
</ul>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>How to add custom fields</h1>

<p>To add custom views, it really simple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">JComponent</span> <span class="nf">getComponent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">JLabel</span><span class="o">(</span><span class="s">&quot;Provide some setting here&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add custom views to <code>JComponent</code> and return <code>getComponent()</code>.</p>

<p>If you make a form file which binds to your <code>ModuleWizardStep</code>, then just return root panel.</p>

<p>In my case, I created GUI <a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.form">form file</a>
Then, bind the form file to <a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.java">IPGWizardSupportLanguageStep</a>.</p>

<p>It ends up</p>

<p><img src="https://raw.githubusercontent.com/shiraji/intellij-plugin-with-gradle-wizard/master/website/images/language.png" alt="language" /></p>

<p>In order to add &ldquo;Project SDK&rdquo; field, you need to override <code>getModuleType()</code> in your <code>ModuleBuilder</code></p>

<p>For instance, to pick standard Java sdk, write following code in kotlin.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">getModuleType</span><span class="p">()</span> <span class="p">=</span> <span class="n">StdModuleTypes</span><span class="p">.</span><span class="n">JAVA</span>
</span></code></pre></td></tr></table></div></figure>


<h1>How to get the user input in <code>ModuleWizardStep</code></h1>

<p>If a user click &ldquo;Next&rdquo; button, <code>ModuleWizardStep#updateDataModel()</code> will be called. You should pass/save the user input in the method.</p>

<p>In my case, it looks really bad design, but it directly passes the language to builder.</p>

<p><a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.java#L43-L46">https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.java#L43-L46</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateDataModel</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">builder</span><span class="o">.</span><span class="na">setLanguage</span><span class="o">(</span><span class="n">languages</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">languageComboBox</span><span class="o">.</span><span class="na">getSelectedIndex</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>How to create a file</h1>

<p>To create a file for new project, You can use <code>VfsUtil.saveText(VirtualFile, text)</code>.</p>

<p>I found really great method in intellij-community repo.</p>

<p><a href="https://github.com/JetBrains/intellij-community/blob/9d6477485d37e796036ee524788231f2f47e6ada/plugins/gradle/src/org/jetbrains/plugins/gradle/service/project/wizard/GradleModuleBuilder.java#L332-L360">https://github.com/JetBrains/intellij-community/blob/9d6477485d37e796036ee524788231f2f47e6ada/plugins/gradle/src/org/jetbrains/plugins/gradle/service/project/wizard/GradleModuleBuilder.java#L332-L360</a></p>

<p>I wish they open this method.</p>

<h1>How to change the file contents</h1>

<p>Use file template. You can check official documentation of <a href="https://www.jetbrains.com/help/idea/2016.1/file-and-code-templates.html">File and Code Templates</a></p>

<p>One thing I want to add is condition. The file template support conditions in following syntax.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span><span class="k">if</span> <span class="o">(</span><span class="n">$</span><span class="o">{</span><span class="n">LANGUAGE</span><span class="o">}</span> <span class="o">&amp;&amp;</span> <span class="n">$</span><span class="o">{</span><span class="n">LANGUAGE</span><span class="o">}</span> <span class="o">==</span> <span class="s">&quot;Kotlin&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">kotlin</span><span class="err">&#39;</span>
</span><span class='line'><span class="err">#</span><span class="k">else</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">java</span><span class="err">&#39;</span>
</span><span class='line'><span class="err">#</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Watch out the indentation. You will generate useless spaces.</p>

<hr />

<p>日本語</p>

<h1>モチベーション</h1>

<p>Intellijのカスタムwizard <a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard">gradle-intellij-plugin wizard</a>を作った時、JetBrainsの<a href="http://www.jetbrains.org/intellij/sdk/docs/tutorials/project_wizard.html">公式ドキュメント</a>を読みました。</p>

<p>ただ、この公式ドキュメントは<a href="http://www.jetbrains.org/intellij/sdk/docs/tutorials/project_wizard/module_types.html">support module types</a>と<a href="http://www.jetbrains.org/intellij/sdk/docs/tutorials/project_wizard/adding_new_steps.html">how to add new steps</a>しかなく、カスタムフィールドの作成方法や、ファイルの追加方法、ファイルの編集方法などがありませんでした。</p>

<p>そこで、このエントリーでその辺りの説明をしたいと思います。</p>

<h1>トピック</h1>

<ul>
<li>カスタムビューの追加方法</li>
<li><code>ModuleWizardStep</code>内での入力情報の取得方法</li>
<li>ファイル作成方法</li>
<li>ファイルの内容変更方法</li>
</ul>


<h1>カスタムビューの追加方法</h1>

<p>カスタムビューの追加方法は正直言うとかなり簡単です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">JComponent</span> <span class="nf">getComponent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">JLabel</span><span class="o">(</span><span class="s">&quot;Provide some setting here&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このメソッド内でカスタムビューを作成し、returnすればOKです。</p>

<p>もし、カスタマイズした<code>ModuleWizardStep</code>をformファイルにバインドしているのであれば、ルートのpanelをreturnするだけです。</p>

<p>自分の場合、<a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.form">フォームファイル</a>
これをこっちにバインドしています。
 <a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.java">IPGWizardSupportLanguageStep</a>.</p>

<p>最終的に出来上がるのが</p>

<p><img src="https://raw.githubusercontent.com/shiraji/intellij-plugin-with-gradle-wizard/master/website/images/language.png" alt="language" /></p>

<p>&ldquo;Project SDK"フィールドを作成するには、<code>getModuleType()</code>を継承する必要があります。</p>

<p>例えば、スタンダードなJava SDKを追加したい場合、以下のようにKoltinで記述します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">getModuleType</span><span class="p">()</span> <span class="p">=</span> <span class="n">StdModuleTypes</span><span class="p">.</span><span class="n">JAVA</span>
</span></code></pre></td></tr></table></div></figure>


<h1><code>ModuleWizardStep</code>内での入力情報の取得方法</h1>

<p>ユーザが"Next"ボタンをクリックすると、<code>ModuleWizardStep#updateDataModel()</code>が呼ばれます。このメソッド内で値を取得したり、保存したりします。</p>

<p>自分の場合、かなり設計がクソだけど、builderに直接設定しちゃってます。(動けばええやろ？)</p>

<p><a href="https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.java#L43-L46">https://github.com/shiraji/intellij-plugin-with-gradle-wizard/blob/1.0.1/src/main/kotlin/com/github/shiraji/ipgwizard/step/IPGWizardSupportLanguageStep.java#L43-L46</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateDataModel</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">builder</span><span class="o">.</span><span class="na">setLanguage</span><span class="o">(</span><span class="n">languages</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">languageComboBox</span><span class="o">.</span><span class="na">getSelectedIndex</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>ファイル作成方法</h1>

<p>ファイルを新しいプロジェクトに追加するには、<code>VfsUtil.saveText(VirtualFile, text)</code>を使います。</p>

<p>intellij-communityのレポジトリにめっちゃ良いメソッドがありました。</p>

<p><a href="https://github.com/JetBrains/intellij-community/blob/9d6477485d37e796036ee524788231f2f47e6ada/plugins/gradle/src/org/jetbrains/plugins/gradle/service/project/wizard/GradleModuleBuilder.java#L332-L360">https://github.com/JetBrains/intellij-community/blob/9d6477485d37e796036ee524788231f2f47e6ada/plugins/gradle/src/org/jetbrains/plugins/gradle/service/project/wizard/GradleModuleBuilder.java#L332-L360</a></p>

<p>これ公開してくれたらいいのにね。</p>

<h1>ファイルの内容変更方法</h1>

<p>IntellijのFile templateの仕組みを使います。File templateの<a href="https://www.jetbrains.com/help/idea/2016.1/file-and-code-templates.html">File and Code Templates</a>を読むと良いです。</p>

<p>一つ、条件文に関して記載がなかったので、追加で説明します。条件文の文法は以下です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span><span class="k">if</span> <span class="o">(</span><span class="n">$</span><span class="o">{</span><span class="n">LANGUAGE</span><span class="o">}</span> <span class="o">&amp;&amp;</span> <span class="n">$</span><span class="o">{</span><span class="n">LANGUAGE</span><span class="o">}</span> <span class="o">==</span> <span class="s">&quot;Kotlin&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">kotlin</span><span class="err">&#39;</span>
</span><span class='line'><span class="err">#</span><span class="k">else</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">java</span><span class="err">&#39;</span>
</span><span class='line'><span class="err">#</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>spaceいっぱい生成しちゃうのでインデント気をつけて下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difference Between Generating Java and Generating Kotlin for Developing IntelliJ Plugin]]></title>
    <link href="http://shiraji.github.io/blog/2016/05/14/difference-between-psijavafile-and-ktfile/"/>
    <updated>2016-05-14T23:33:07+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/05/14/difference-between-psijavafile-and-ktfile</id>
    <content type="html"><![CDATA[<h1>Motivation</h1>

<p>I am a maintainer of <a href="https://github.com/shiraji/permissions-dispatcher-plugin">PermissionsDispatcher Plugin</a> which generates Java and Kotlin for <a href="https://github.com/hotchemi/PermissionsDispatcher">PermissionsDispatcher</a>
Since Kotlin is getting famous for Android developers, I thought IntelliJ plugins, which generate Android code, should support both Java and Kotlin. (By the way, <a href="http://blog.jetbrains.com/kotlin/2016/05/kotlin-1-0-2-is-here/">Kotlin 1.0.2</a> now supports Android lint! This definitely will lead more developers use Kotlin!)</p>

<p>However, while I was developing this plugin, I found really hard to generate both Java and Kotlin code.</p>

<p>So, this blog post describes what are the differences between generating Java and generating Kotlin using IntelliJ plugin.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>Environment</h1>

<p>Before start taking about the differences, the followings are the environment for this blog post.</p>

<ul>
<li>Kotlin for writing the plugin</li>
<li>Gradle for build</li>
<li><a href="https://github.com/JetBrains/gradle-intellij-plugin">gradle-intellij-plugin</a></li>
</ul>


<h1><code>getClasses</code> for <code>PsiJavaFile</code> vs <code>KtFile</code></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">e</span><span class="p">.</span><span class="n">getData</span><span class="p">(</span><span class="n">CommonDataKeys</span><span class="p">.</span><span class="n">PSI_FILE</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>returns <code>PsiJavaFile</code> or <code>KtFile</code>. Both of them implements <code>PsiClassOwner</code> which means both of them has the method <code>PsiClass[] getClasses()</code>.</p>

<p>This method is useful for <code>PsiJavaFile</code>, it lets access classes of the file. The plugin can read/write contents of the classes.</p>

<p>For <code>KtFile</code>, I expected the same. I want to read/write code of classes. Yes, you can read <code>.class</code> file. It is not classes inside <code>.kt</code> file. So, even though, it has methods <code>add</code>, <code>addBefore</code> or <code>addAfter</code>, <code>KtFile#classes#add</code> throw an exception says the plugin won&rsquo;t be able to write contents to <code>.class</code> file!</p>

<p>If you want to get objects for generating code of Kotlin, then use <code>KtFile#getDeclarations</code>.</p>

<h1><code>PsiFactory</code></h1>

<p>This could be because I could not find the best way to generate code&hellip;but PsiFactory of Java and Kotlin is different</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">psiElementFactory</span><span class="p">:</span> <span class="n">PsiElementFactory</span> <span class="p">=</span> <span class="n">JavaPsiFacade</span><span class="p">.</span><span class="n">getElementFactory</span><span class="p">(</span><span class="n">project</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">psiFactory</span><span class="p">:</span> <span class="n">KtPsiFactory</span> <span class="p">=</span> <span class="n">KtPsiFactory</span><span class="p">(</span><span class="n">project</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Generating annotations</h1>

<p><code>PsiMethod</code> has modifierList</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">method</span><span class="p">.</span><span class="n">modifierList</span><span class="p">.</span><span class="n">addAnnotation</span><span class="p">(</span><span class="s">&quot;Foo&quot;</span><span class="p">)</span><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the other hand, <code>KtNamedFunction</code> has <code>addAnnotationEntry</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">function</span><span class="p">.</span><span class="n">addAnnotationEntry</span><span class="p">(</span><span class="n">psiFactory</span><span class="p">.</span><span class="n">createAnnotationEntry</span><span class="p">(</span><span class="s">&quot;@Foo&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>To insert new line after annotation, you need to add new line manually.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">entry</span> <span class="p">=</span> <span class="n">function</span><span class="p">.</span><span class="n">addAnnotationEntry</span><span class="p">(</span><span class="n">psiFactory</span><span class="p">.</span><span class="n">createAnnotationEntry</span><span class="p">(</span><span class="s">&quot;@Foo&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">entry</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">psiFactory</span><span class="p">.</span><span class="n">createNewLine</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Generating methods</h1>

<p><code>PsiClass</code> is easy to add method. Use <code>createMethodFromText</code> and <code>add</code> to <code>PsiClass</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">methodTemplate</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;void foo() {</span>
</span><span class='line'><span class="p">}</span><span class="s">&quot;&quot;&quot;.trimMargin()</span>
</span><span class='line'><span class="k">val</span> <span class="py">method</span> <span class="p">=</span> <span class="n">JavaPsiFacade</span><span class="p">.</span><span class="n">getElementFactory</span><span class="p">(</span><span class="n">project</span><span class="p">).</span><span class="n">createMethodFromText</span><span class="p">(</span><span class="n">methodTemplate</span><span class="p">,</span> <span class="n">psiClass</span><span class="p">)</span>
</span><span class='line'><span class="n">psiClass</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">method</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>For kotlin, it&rsquo;s almost the same.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">psiFactory</span> <span class="p">=</span> <span class="n">KtPsiFactory</span><span class="p">(</span><span class="n">project</span><span class="p">)</span>
</span><span class='line'><span class="k">val</span> <span class="py">function</span> <span class="p">=</span> <span class="n">psiFactory</span><span class="p">.</span><span class="n">createFunction</span><span class="p">(</span><span class="s">&quot;&quot;&quot;void foo() {</span>
</span><span class='line'><span class="p">}</span><span class="s">&quot;&quot;&quot;.trimMargin())</span>
</span><span class='line'><span class="n">ktClass</span><span class="p">.</span><span class="n">getBody</span><span class="p">()</span><span class="o">!!</span><span class="p">.</span><span class="n">addBefore</span><span class="p">(</span><span class="n">function</span><span class="p">,</span> <span class="n">ktClass</span><span class="p">.</span><span class="n">getBody</span><span class="p">()</span><span class="o">!!</span><span class="p">.</span><span class="n">rBrace</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for Creating Intellij Plugin]]></title>
    <link href="http://shiraji.github.io/blog/2016/03/28/create-intellij-plugin/"/>
    <updated>2016-03-28T23:00:00+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/03/28/create-intellij-plugin</id>
    <content type="html"><![CDATA[<h1>Summery</h1>

<p>There are tips for creating intellij plugins</p>

<ul>
<li>Logging</li>
<li>plugin.xml</li>
<li>Action</li>
</ul>


<p>This is note for myself. I won&rsquo;t add description if the sample is clear enough for me.</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>Logging</h1>

<p>Simply use Sys-out</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;logging...&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, sys-out shows logs on the console. If you want to show pop up, use notification</p>

<h2>Notification</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Notifications</span><span class="p">.</span><span class="n">Bus</span><span class="p">.</span><span class="n">notify</span><span class="p">(</span><span class="n">Notification</span><span class="p">(</span><span class="s">&quot;Plugin ID&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;Title&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;Content&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">NotificationType</span><span class="p">.</span><span class="n">INFORMATION</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h1>plugin.xml</h1>

<h2>URL of the plugin</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;idea-plugin</span> <span class="na">url=</span><span class="s">&quot;https://plugins.jetbrains.com/plugin/8262?pr=&quot;</span> <span class="na">version=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>vendor</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;vendor</span> <span class="na">email=</span><span class="s">&quot;isogai.shiraji@gmail.com&quot;</span> <span class="na">url=</span><span class="s">&quot;https://github.com/shiraji&quot;</span><span class="nt">&gt;</span>Shiraji<span class="nt">&lt;/vendor&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>idea-version</h2>

<p>To use kotlin, IDE version should be higher than 143.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;idea-version</span> <span class="na">since-build=</span><span class="s">&quot;143&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Action class</h1>

<h2>Creating new action</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>right click src &gt; New &gt; action
</span></code></pre></td></tr></table></div></figure>


<h2>Methods</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">actionPerformed</span><span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">AnActionEvent</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Update method</h2>

<p>To decide show the action or not, I need to override the update method.</p>

<p>This method should be less than 0.1 sec to complete.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">update</span><span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">AnActionEvent</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">e</span> <span class="o">?:</span> <span class="k">return</span>
</span><span class='line'>    <span class="k">super</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="n">FindPullRequestModel</span><span class="p">(</span><span class="n">e</span><span class="p">).</span><span class="n">isEnable</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">e</span><span class="p">.</span><span class="n">presentation</span><span class="p">.</span><span class="n">isEnabled</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'>        <span class="n">e</span><span class="p">.</span><span class="n">presentation</span><span class="p">.</span><span class="n">isVisible</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ForwardingAstVisitor's Life Cycle (Android Lint)]]></title>
    <link href="http://shiraji.github.io/blog/2016/02/24/forwardingAstVisitor/"/>
    <updated>2016-02-24T14:37:58+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/02/24/forwardingAstVisitor</id>
    <content type="html"><![CDATA[<h1>Summary</h1>

<ul>
<li><code>ForwardingAstVisitor</code> has life cycle</li>
<li>visitXxx -> afterXxx -> endXxx</li>
<li>Begin <code>visitCompilationUnit</code>, End <code>afterVisitCompilationUnit</code></li>
<li>Go from top to bottom. No surprise, except annotation.</li>
<li>Does not talk about visitIf or any of visitXxx where Xxx is keyword</li>
</ul>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>Motivation</h1>

<p>The past few weeks, I am working on creating custom lints for <a href="https://github.com/hotchemi/PermissionsDispatcher">PermissionsDispatcher</a>.</p>

<p>Using <code>ForwardingAstVisitor</code> is the easiest way to implement custom lint. I found there are 75 &ldquo;visit&rdquo; methods in the class. For instance, <code>visitMethodDeclaration</code> is called for iterating all method declarations. <code>visitIdentifier</code> is for all identifiers. Trust me, there is even <code>visitIf</code> and <code>visitSwitch</code> that are called for each <code>if</code> and <code>switch</code>.</p>

<p>However, I could not find any documentations that describes which &ldquo;visit&rdquo; method comes first. So&hellip;this is the post that describes what is the &ldquo;lifecycle&rdquo; of <code>ForwardingAstVisitor</code>.</p>

<h1>Basic Rules</h1>

<p>There are 4 types of methods, <code>visit</code>, <code>visitNode</code>, <code>afterVisit</code>, <code>endVisit</code> for <code>ForwardingAstVisitor</code>.</p>

<ul>
<li><code>visitXxx</code> comes first</li>
<li><code>visitNode</code> comes second for dive into the node</li>
<li><code>afterVisitXxx</code> comes if there is no more method call inside <code>visitXxx</code></li>
<li>Finally, <code>endVisit</code> comes for wrap up.</li>
</ul>


<p>For instance, followings are the method call for checking <code>@Override</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>visitAnnotation                     : target node -&gt; @Override
</span><span class='line'>| visitNode                         : target node -&gt; @Override
</span><span class='line'>| | visitTypeReference              : target node -&gt; Override
</span><span class='line'>| | | visitNode                     : target node -&gt; Override
</span><span class='line'>| | | | visitTypeReferencePart      : target node -&gt; Override
</span><span class='line'>| | | | | visitNode                 : target node -&gt; Override
</span><span class='line'>| | | | | | visitIdentifier         : target node -&gt; Override
</span><span class='line'>| | | | | | | visitNode             : target node -&gt; Override
</span><span class='line'>| | | | | | afterVisitIdentifier    : target node -&gt; Override
</span><span class='line'>| | | | | endVisit                  : target node -&gt; Override
</span><span class='line'>| | | | afterVisitTypeReferencePart : target node -&gt; Override
</span><span class='line'>| | | endVisit                      : target node -&gt; Override
</span><span class='line'>| | afterVisitTypeReference         : target node -&gt; Override
</span><span class='line'>| endVisit                          : target node -&gt; Override
</span><span class='line'>afterVisitAnnotation                : target node -&gt; @Override</span></code></pre></td></tr></table></div></figure>


<h1>General Rules</h1>

<p>Now, let see what&rsquo;s happens if I want to lint check for a Java file.</p>

<p>Assuming I am going to check following class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kn">package</span> <span class="n">pkg</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.Manifest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.v7.app.AppCompatActivity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">permissions.dispatcher.NeedsPermission</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">permissions.dispatcher.RuntimePermissions</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RuntimePermissions</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@NeedsPermission</span><span class="o">(</span><span class="n">Manifest</span><span class="o">.</span><span class="na">permission</span><span class="o">.</span><span class="na">CAMERA</span><span class="o">)</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">showCamera</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRequestPermissionsResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">permissions</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">grantResults</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onRequestPermissionsResult</span><span class="o">(</span><span class="n">requestCode</span><span class="o">,</span> <span class="n">permissions</span><span class="o">,</span> <span class="n">grantResults</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MainActivityPermissionsDispatcher</span><span class="o">.</span><span class="na">onRequestPermissionsResult</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">requestCode</span><span class="o">,</span> <span class="n">grantResults</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the <a href="https://gist.github.com/shiraji/dc4665d704d8852243c3">debuging code</a>. It&rsquo;s basically Sys-out method name and <code>node</code> parameter. And the output is <a href="https://gist.github.com/shiraji/37993e824c36e31724d5">this</a></p>

<p>OK, Too long&hellip;let me summarize idea.</p>

<ul>
<li>The first visit-method is <code>visitCompilationUnit</code></li>
<li>Next it checks <code>visitPackageDeclaration</code> for <code>package pkg;</code> (Meaning, it starts from the first line of the class)</li>
<li>And goes one by one until it reaches the bottom of the class</li>
<li>The last after-method is <code>afterVisitCompilationUnit</code></li>
</ul>


<h1>Exceptional Rules</h1>

<p>Now, we know the lint checks goes the top to the bottom. However, there is an exception, Annotation.</p>

<p><code>@RuntimePermissions</code> which is located the above of the class declaration in the example above.</p>

<p>Actually, when we run the lint checks, <code>visitClassDeclaration</code> comes <a href="https://gist.github.com/shiraji/37993e824c36e31724d5#file-output-txt-L127">first</a> and then <code>visitAnnotation</code> comes <a href="https://gist.github.com/shiraji/37993e824c36e31724d5#file-output-txt-L167">later</a>.</p>

<p>It seems that the lint handles annotation as a node inside of method declaration.</p>

<p>For example, if we want to store class declaration object which <code>@RuntimePermissions</code>, we cannot do followings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">ClassDeclaration</span><span class="o">&gt;</span> <span class="n">classDeclarations</span><span class="o">;</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">hasRuntimePermisions</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">visitAnnotation</span><span class="o">(</span><span class="n">Annotation</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">type</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">astAnnotationTypeReference</span><span class="o">().</span><span class="na">getTypeName</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="s">&quot;permissions.dispatcher.RuntimePermissions&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">type</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">hasRuntimePermisions</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">visitAnnotation</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">visitClassDeclaration</span><span class="o">(</span><span class="n">ClassDeclaration</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">hasRuntimePermisions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classDeclarations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">visitClassDeclaration</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead, I would use <code>afterVisitClassDeclaration</code> and call <code>requestRepeat</code> to run other detector which uses class declaration objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">JavaContext</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">ClassDeclaration</span><span class="o">&gt;</span> <span class="n">classDeclarations</span><span class="o">;</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">hasRuntimePermisions</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">visitAnnotation</span><span class="o">(</span><span class="n">Annotation</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">type</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">astAnnotationTypeReference</span><span class="o">().</span><span class="na">getTypeName</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="s">&quot;permissions.dispatcher.RuntimePermissions&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">type</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">hasRuntimePermisions</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">visitAnnotation</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterVisitClassDeclaration</span><span class="o">(</span><span class="n">ClassDeclaration</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">hasRuntimePermisions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classDeclarations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
</span><span class='line'>        <span class="n">context</span><span class="o">.</span><span class="na">requestRepeat</span><span class="o">(</span><span class="k">new</span> <span class="nf">MyOtherDetector</span><span class="o">(),</span> <span class="n">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">Scope</span><span class="o">.</span><span class="na">ALL_JAVA_FILES</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">visitClassDeclaration</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Lint for Library]]></title>
    <link href="http://shiraji.github.io/blog/2016/02/17/custom-lint-for-library/"/>
    <updated>2016-02-17T03:00:00+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/02/17/custom-lint-for-library</id>
    <content type="html"><![CDATA[<h1>Summary</h1>

<ul>
<li>PermissionsDispatcher now have a custom lint</li>
<li>Adding custom lint is not that hard</li>
<li>LintDetectorTest&hellip;? Forget it</li>
</ul>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>PermissionsDispatcher now have a custom lint</h1>

<p>First of all, I am one of collaborators of <a href="https://github.com/hotchemi/PermissionsDispatcher">PermissionsDispatcher</a> which makes developers handle runtime permissions very easily.</p>

<p>PermissionsDispatcher now have a custom lint for its library. Initial issue came from <a href="https://github.com/hotchemi/PermissionsDispatcher/issues/56#issuecomment-163499243">this comment</a>.</p>

<p>The library requires the developer to define a method with <code>@NeedsPermission</code>. Like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@NeedsPermission</span><span class="o">(</span><span class="n">Manifest</span><span class="o">.</span><span class="na">permission</span><span class="o">.</span><span class="na">CAMERA</span><span class="o">)</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">showCamera</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, this method should not directly access. Instead, the developers must use a method that PermissionsDispatcher generated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">MainActivityPermissionsDispatcher</span><span class="o">.</span><span class="na">showCameraWithCheck</span><span class="o">(</span><span class="k">this</span><span class="o">);</span> <span class="c1">// Yes</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">foo2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">showCamera</span><span class="o">();</span> <span class="c1">// No!</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to make sure the developers did not call this method, we decide to provide custom lint for this library.</p>

<h1>How to add custom lint for library</h1>

<p>To create custom lint for Android application, check links below</p>

<ul>
<li><a href="http://tools.android.com/tips/lint-custom-rules">Writing Custom Lint Rules</a></li>
<li><a href="http://tools.android.com/tips/lint/writing-a-lint-check">Writing a Lint Check</a></li>
<li><a href="http://qiita.com/hotchemi/items/9364d54a0e024a5e6275">@hotchime&rsquo;s blog post at qiita</a> (For Japanese developer)</li>
</ul>


<p>Custom lint for library needs extra settings to inject <code>lint.jar</code> to its .aar file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">configurations</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">lintChecks</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// we have lint module with lintCheck configuration.</span>
</span><span class='line'>    <span class="c1">// check this file: https://github.com/shiraji/PermissionsDispatcher/blob/master/lint/build.gradle</span>
</span><span class='line'>    <span class="n">lintChecks</span> <span class="nf">project</span><span class="o">(</span><span class="nl">path:</span> <span class="s1">&#39;:lint&#39;</span><span class="o">,</span> <span class="nl">configuration:</span> <span class="s1">&#39;lintChecks&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">assemble</span><span class="o">.</span><span class="na">doLast</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">copyJarToOtherModules</span><span class="o">.</span><span class="na">execute</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">copyLintJar</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Copy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">from</span><span class="o">(</span><span class="n">configurations</span><span class="o">.</span><span class="na">lintChecks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">rename</span> <span class="o">{</span> <span class="s1">&#39;lint.jar&#39;</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">into</span> <span class="s1">&#39;build/intermediates/lint/&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">project</span><span class="o">.</span><span class="na">afterEvaluate</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">compileLintTask</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="na">tasks</span><span class="o">.</span><span class="na">find</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="s1">&#39;compileLint&#39;</span> <span class="o">}</span>
</span><span class='line'>    <span class="n">compileLintTask</span><span class="o">.</span><span class="na">dependsOn</span><span class="o">(</span><span class="n">copyLintJar</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, if there is <code>compileLint</code> task, then make the task depends on <code>copyLintJar</code> task which copies <code>lint.jar</code> to <code>build/intermediates/lint/</code></p>

<p>The user of this library doesn&rsquo;t need to put lint.jar to <code>.android/lint/</code>. Just sync library and then run <code>./gradlew lint</code></p>

<h1>Use LintDetectorTest</h1>

<p>Just don&rsquo;t.</p>

<p>Check this code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">root</span><span class="o">,</span>
</span><span class='line'>            <span class="s">&quot;tools/base/lint/libs/lint-tests/src/test/java/&quot;</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;/&#39;</span><span class="o">,</span> <span class="n">File</span><span class="o">.</span><span class="na">separatorChar</span><span class="o">)</span>
</span><span class='line'>            <span class="o">+</span> <span class="n">pkg</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;.&#39;</span><span class="o">,</span> <span class="n">File</span><span class="o">.</span><span class="na">separatorChar</span><span class="o">)</span>
</span><span class='line'>            <span class="o">+</span> <span class="n">File</span><span class="o">.</span><span class="na">separatorChar</span> <span class="o">+</span> <span class="n">path</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the code that reads from <code>$ROOT/tools/base/lint/libs/lint-tests/src/test/java/PACAKGE-NAME-REPLACE-DOT-WITH-SLASH</code>.
I believe most developers doesn&rsquo;t want to put project in the specific directory in order to pass the test cases.</p>

<p>Actually, current version of <code>LintDetectorTest</code> has a lots of problems with loading resources, java source and &ldquo;class&rdquo; file. (Yes! you need to supply .class file to run the test)</p>

<p>In order to use the <code>LintDetectorTest</code>, the developer must override <code>protected InputStream getTestResource(String relativePath, boolean expectExists)</code> like <a href="https://android.googlesource.com/platform/tools/base/+/master/lint/libs/lint-tests/src/test/java/com/android/tools/lint/checks/AbstractCheckTest.java?autodive=0%2F%2F%2F%2F%2F%2F%2F#49">what AOSP did</a></p>

<p><code>LintDetectorTest</code> is still Beta. I assumed there are a lot of work to make it production release.</p>

<p>If it comes to production, I hope it does not require me to pass .java/.class file like this way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">lintFiles</span><span class="o">(</span><span class="s">&quot;MainActivity.class=&gt;pkg/MainActivity.class&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Now how to test???</h1>

<p>I don&rsquo;t know.</p>

<p>The only way I came up is <a href="https://github.com/hotchemi/PermissionsDispatcher/pull/75#issuecomment-178650850">manual testing</a>.</p>

<p>So, someone who know better way to test lint, please let me know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アクセス修飾子次第で、メソッド数が増えてしまう問題について]]></title>
    <link href="http://shiraji.github.io/blog/2016/01/11/accessor/"/>
    <updated>2016-01-11T10:50:49+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/01/11/accessor</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<p>privateアクセス修飾子をつけると条件次第で勝手にメソッド余分に生成されるから気をつけてね！</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>最初に</h1>

<p>Jakeさんがこの<a href="https://github.com/google/gson/pull/761">pull request</a>を投げていて、察するに$accessorというメソッドが生成されてしまうので、それを生成しないようにしたぜ？ってことだと思う。が、なんでそうなるのかわからない。
他にも、コンストラクタの修飾子を変更しているんだけど、これもなんのためなのかわからない。
そこで、コードを書いてみて、実際にやってみました。</p>

<p>このpull requestでは以下の４つを修正しています。</p>

<ul>
<li><a href="https://github.com/google/gson/pull/761/files#diff-694e40202daa75f0056c800b5d953297R88">コンストラクタのprivateの削除</a></li>
<li><a href="https://github.com/google/gson/pull/761/files#diff-a654cd1a9dadb8afb191e239a12e19a5R765">デフォルトコンストラクタの定義</a></li>
<li><a href="https://github.com/google/gson/pull/761/files#diff-0776314ca8e083ca3943426740d1dd69R245">メンバー変数のprivateの削除</a></li>
<li><a href="https://github.com/google/gson/pull/761/files#diff-0776314ca8e083ca3943426740d1dd69R465">メソッドのprivateの削除</a></li>
</ul>


<h1><a href="https://github.com/google/gson/pull/761/files#diff-694e40202daa75f0056c800b5d953297R88">コンストラクタのprivateの削除</a></h1>

<p>この変更がわかりやすいようにサンプルコードを作成してみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">PrivateConstructor</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractInnerClass</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">AbstractInnerClass</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">class</span> <span class="nc">InnerClass</span> <span class="kd">extends</span> <span class="n">AbstractInnerClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">DefaultConstructor</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractInnerClass</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">AbstractInnerClass</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">class</span> <span class="nc">InnerClass</span> <span class="kd">extends</span> <span class="n">AbstractInnerClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>違いは、PrivateConstructor内にある、AbstractInnerClassのコンストラクタにprivateがあるかどうかです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">%</span> <span class="n">javap</span> <span class="o">-</span><span class="n">p</span> <span class="n">PrivateConstructor</span><span class="o">*.</span><span class="na">class</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;PrivateConstructor.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">PrivateConstructor$1</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;PrivateConstructor.java&quot;</span>
</span><span class='line'><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">PrivateConstructor$AbstractInnerClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">PrivateConstructor</span> <span class="k">this</span><span class="n">$0</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">PrivateConstructor$AbstractInnerClass</span><span class="o">(</span><span class="n">PrivateConstructor</span><span class="o">);</span>
</span><span class='line'>  <span class="n">PrivateConstructor$AbstractInnerClass</span><span class="o">(</span><span class="n">PrivateConstructor</span><span class="o">,</span> <span class="n">PrivateConstructor$1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;PrivateConstructor.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">PrivateConstructor$InnerClass</span> <span class="kd">extends</span> <span class="n">PrivateConstructor$AbstractInnerClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">PrivateConstructor</span> <span class="k">this</span><span class="n">$0</span><span class="o">;</span>
</span><span class='line'>  <span class="n">PrivateConstructor$InnerClass</span><span class="o">(</span><span class="n">PrivateConstructor</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;PrivateConstructor.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">PrivateConstructor</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">PrivateConstructor</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">%</span> <span class="n">javap</span> <span class="o">-</span><span class="n">p</span> <span class="n">DefaultConstructor</span><span class="o">*.</span><span class="na">class</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;DefaultConstuctor.java&quot;</span>
</span><span class='line'><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">DefaultConstructor$AbstractInnerClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">DefaultConstructor</span> <span class="k">this</span><span class="n">$0</span><span class="o">;</span>
</span><span class='line'>  <span class="n">DefaultConstructor$AbstractInnerClass</span><span class="o">(</span><span class="n">DefaultConstructor</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;DefaultConstuctor.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">DefaultConstructor$InnerClass</span> <span class="kd">extends</span> <span class="n">DefaultConstructor$AbstractInnerClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">DefaultConstructor</span> <span class="k">this</span><span class="n">$0</span><span class="o">;</span>
</span><span class='line'>  <span class="n">DefaultConstructor$InnerClass</span><span class="o">(</span><span class="n">DefaultConstructor</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;DefaultConstuctor.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">DefaultConstructor</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">DefaultConstructor</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Javaファイル内では違いはprivateだけでしたが、classファイル内では、以下のメソッドが出来ています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PrivateConstructor$AbstractInnerClass</span><span class="o">(</span><span class="n">PrivateConstructor</span><span class="o">,</span> <span class="n">PrivateConstructor$1</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これが生成されることで、メソッド数がDefaultConstuctor.javaでは3つなのに、PrivateConstructor.javaでは4つになってしまいます。
なぜこうなるのかというと、PrivateConstructor$InnerClassが継承するために必要なコンストラクタを定義する必要があるためです。</p>

<p>実際こんなクラスを定義してみるとわかります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">PrivateConstructor</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractInnerClass</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">AbstractInnerClass</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">// class InnerClass extends AbstractInnerClass {</span>
</span><span class='line'>  <span class="c1">// }</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">%</span> <span class="n">javap</span> <span class="o">-</span><span class="n">p</span> <span class="n">PrivateConstructor</span><span class="o">*.</span><span class="na">class</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;PrivateConstructor.java&quot;</span>
</span><span class='line'><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">PrivateConstructor$AbstractInnerClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">PrivateConstructor</span> <span class="k">this</span><span class="n">$0</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">PrivateConstructor$AbstractInnerClass</span><span class="o">(</span><span class="n">PrivateConstructor</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;PrivateConstructor.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">PrivateConstructor</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">PrivateConstructor</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>PrivateConstructor$AbstractInnerClassだけしか定義されておらず、privateのコンストラクタにアクセスする必要がないため、<code>PrivateConstructor$AbstractInnerClass(PrivateConstructor, PrivateConstructor$1);</code>は生成されません。</p>

<h1><a href="https://github.com/google/gson/pull/761/files#diff-a654cd1a9dadb8afb191e239a12e19a5R765">デフォルトコンストラクタの定義</a></h1>

<p>今回の修正で一番おもしろいのがこれです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">NoDefaultConstructor</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">class</span> <span class="nc">InnerClass</span> <span class="kd">extends</span> <span class="n">AbstractClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをコンパイルすると、以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;NoDefaultConstructor.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">NoDefaultConstructor$1</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;NoDefaultConstructor.java&quot;</span>
</span><span class='line'><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">NoDefaultConstructor$AbstractClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">NoDefaultConstructor</span> <span class="k">this</span><span class="n">$0</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">NoDefaultConstructor$AbstractClass</span><span class="o">(</span><span class="n">NoDefaultConstructor</span><span class="o">);</span>
</span><span class='line'>  <span class="n">NoDefaultConstructor$AbstractClass</span><span class="o">(</span><span class="n">NoDefaultConstructor</span><span class="o">,</span> <span class="n">NoDefaultConstructor$1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;NoDefaultConstructor.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">NoDefaultConstructor$InnerClass</span> <span class="kd">extends</span> <span class="n">NoDefaultConstructor$AbstractClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">NoDefaultConstructor</span> <span class="k">this</span><span class="n">$0</span><span class="o">;</span>
</span><span class='line'>  <span class="n">NoDefaultConstructor$InnerClass</span><span class="o">(</span><span class="n">NoDefaultConstructor</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;NoDefaultConstructor.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">NoDefaultConstructor</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">NoDefaultConstructor</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>コンストラクタが生成されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="nf">NoDefaultConstructor$AbstractClass</span><span class="o">(</span><span class="n">NoDefaultConstructor</span><span class="o">);</span>
</span><span class='line'><span class="n">NoDefaultConstructor$AbstractClass</span><span class="o">(</span><span class="n">NoDefaultConstructor</span><span class="o">,</span> <span class="n">NoDefaultConstructor$1</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Javaではコンストラクタを定義していない場合、デフォルトコンストラクタが生成されます。
しかし、そのデフォルトコンストラクタはclassのアクセス修飾子と同じものが定義されます。</p>

<p><code>AbstractClass</code>はprivateで定義されているため、privateのデフォルトコンストラクタが定義されます。それがこれ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="nf">NoDefaultConstructor$AbstractClass</span><span class="o">(</span><span class="n">NoDefaultConstructor</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>それで、このコンストラクタにアクセスするためのコンストラクタを定義する必要があるので、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">NoDefaultConstructor$AbstractClass</span><span class="o">(</span><span class="n">NoDefaultConstructor</span><span class="o">,</span> <span class="n">NoDefaultConstructor$1</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これが生成されます。</p>

<p>メソッドを0で定義していますが、実は4つのメソッドが出来ていました。
少なくともprivateのデフォルトコンストラクタはいらないので、空のデフォルトコンストラクタの変更を入れているわけです。</p>

<h1><a href="https://github.com/google/gson/pull/761/files#diff-0776314ca8e083ca3943426740d1dd69R245">メンバー変数のprivateの削除</a></h1>

<p>この変更も面白いです。</p>

<p>サンプルコードはこんな感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">DefaultMember</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">flag</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">class</span> <span class="nc">InnerClass</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;DefaultMember.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">DefaultMember$InnerClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">DefaultMember</span> <span class="k">this</span><span class="n">$0</span><span class="o">;</span>
</span><span class='line'>  <span class="n">DefaultMember$InnerClass</span><span class="o">(</span><span class="n">DefaultMember</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">foo</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;DefaultMember.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">DefaultMember</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">flag</span><span class="o">;</span>
</span><span class='line'>  <span class="n">DefaultMember</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">PrivateMember</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">flag</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">class</span> <span class="nc">InnerClass</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;PrivateMember.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">PrivateMember$InnerClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">PrivateMember</span> <span class="k">this</span><span class="n">$0</span><span class="o">;</span>
</span><span class='line'>  <span class="n">PrivateMember$InnerClass</span><span class="o">(</span><span class="n">PrivateMember</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">foo</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;PrivateMember.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">PrivateMember</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">flag</span><span class="o">;</span>
</span><span class='line'>  <span class="n">PrivateMember</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">access$002</span><span class="o">(</span><span class="n">PrivateMember</span><span class="o">,</span> <span class="kt">boolean</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんなのが出来ています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">access$002</span><span class="o">(</span><span class="n">PrivateMember</span><span class="o">,</span> <span class="kt">boolean</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは、Innerクラスからflagにアクセスするためのメソッドです。
privateアクセス修飾子のため、アクセス出来ないので、accessというprefix付きのメソッドが生成されflagにアクセス出来るようにしています。</p>

<h1><a href="https://github.com/google/gson/pull/761/files#diff-0776314ca8e083ca3943426740d1dd69R465">メソッドのprivateの削除</a></h1>

<p>パターンパターン！ですけどメソッドのアクセス修飾子も同じです。</p>

<p>サンプルコードはこれ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">PrivateMethod</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Object</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">void</span> <span class="nf">bar</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">PrivateMethod</span> <span class="n">method</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PrivateMethod</span><span class="o">();</span>
</span><span class='line'>        <span class="n">method</span><span class="o">.</span><span class="na">foo</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;PrivateMethod.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">PrivateMethod</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">PrivateMethod</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">foo</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">static</span> <span class="kt">void</span> <span class="nf">access$000</span><span class="o">(</span><span class="n">PrivateMethod</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでprivateを外すとこうなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">PrivateMethod</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Object</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">void</span> <span class="nf">bar</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">PrivateMethod</span> <span class="n">method</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PrivateMethod</span><span class="o">();</span>
</span><span class='line'>        <span class="n">method</span><span class="o">.</span><span class="na">foo</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;PrivateMethod.java&quot;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">PrivateMethod</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">PrivateMethod</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">foo</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>static void access$000(PrivateMethod);</code>が減りました。
これもアクセスするために生成されたメソッドです。</p>

<h1>終わりに</h1>

<p>Javaのアプリケーションではそこまで影響度はないですが、Androidはメソッド65K問題があるので、メソッド数には注意が必要です。特に利用しているライブラリではメソッド数を減らそうという狙いがあったのだと思います。</p>

<p>Jakeさんは他にもこの自動生成されるメソッドの検出方法を<a href="https://github.com/google/gson/pull/761#issuecomment-167436875">コメント</a>しています。</p>

<p>Androiderは盲目的にprivateのアクセス修飾子にすればいいという考えは辞めたほうがいいようです。</p>

<p>ちなみにJakeさんは一つ<a href="https://gist.github.com/JakeWharton/5b3dbbc54c779a6bc6af">どうしようもない例</a>も出してくれてます。</p>

<p>これはメソッドを減らすことがどうやっても出来ないそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プルリク駆動勉強]]></title>
    <link href="http://shiraji.github.io/blog/2016/01/10/pull_req_study/"/>
    <updated>2016-01-10T10:44:39+09:00</updated>
    <id>http://shiraji.github.io/blog/2016/01/10/pull_req_study</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<p>勉強出来そうなプロジェクトを選らんで、pull requestを投げて、レビューしてもらうと勉強になるよ。</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>対象者</h1>

<ul>
<li>息をするようにpull requestを投げられない</li>
<li>プログラミングの基礎は勉強したけど、今度どうすればいいのわからない</li>
</ul>


<h1>プルリク駆動勉強とは</h1>

<p>30歳を超えて、会社では中堅になりました。昔は会社から与えられた仕事をこなすことによって成長を感じられていました。ここ数年は後輩に教えたり、リソース管理などをすることが多くなり、エンジニアとしての成長を感じられなくなってしまいました。(マネージメント力の成長は感じています。)このままではいかん！ということで、考え出したのがプルリク駆動勉強です。</p>

<p>プルリク駆動勉強とはpull requestを投げるためにそのプロジェクトを学んだり、英語でのコミュニケーションをしたり、その言語のベストプラクティスを体で覚えたりすることです。</p>

<p>とにかくpull requestを投げてレビューされることを目的にします。</p>

<p>pull request投げるなんて出来ない！怖い！って思うかもしれません。
確かに急に新しい機能の提案するのは中々通らないし、レビューすらしてくれないこともあります。しかし、すでにあるIssueのうち、プロジェクトオーナーが「これはやりたいけど、時間が〜」と言っているようなものはくそコードを投げつけてもしっかり受け止めてくれ、そのコードをより良いものに仕上げるようにアドバイスくれます。</p>

<p>このレビューが非常に良く、凄腕のエンジニアが無料でコードを見てくれてアドバイスまでくれるのでスキルアップに最適です。こっちは勉強のつもりなんですが、pull requestを送っただけで感謝されることだってあります。もしそのコードがマージなんてされちゃえば、有名どころのプロジェクトの一部が自分のコードで動くことになるわけです。これは嬉しい。</p>

<p>かといって、無闇やたらにpull requestを投げてもいいことはないので自分の経験からこれなら勉強出来る！というものを説明していきます。</p>

<h1>プルリク駆動勉強の条件</h1>

<p>自分は以下の条件でpull requestを投げるプロジェクトを選定をします。</p>

<ul>
<li>GitHubのスターが500以上。出来れば5000以上</li>
<li>開発が活発</li>
<li>Issueがラベルなどで管理されている</li>
<li>放置されているpull requestが少ない</li>
<li>GitHubで完結している</li>
<li>使ったことあるなしは気にしない</li>
</ul>


<h2>GitHubのスターが500↑</h2>

<p>GitHubのスターが多いものは注目度が高く、利用価値が高いです。またこういうプロジェクトの開発に関わっている人は技術レベルが高く、pull requestへのレビューもかなり厳しくなります。こういうプロジェクトにコントリビュート出来るとモチベーションアップにも繋がるため、有名どころを積極的に狙います。</p>

<p>ただし、有名どころだと「バグ報告はありがたいけど、いきなりコードのコントリビュートはしなくていい」と言うところもありますので、CONTRIBUTING.mdは注意して読んで下さい。</p>

<h2>開発が活発</h2>

<p>1年以上放置されているライブラリだとマージどころかレビューされない可能性が高くなります。それでは意味がないので、コードレビューがされているかどうかの確認は絶対行います。</p>

<p>マージ権限があるユーザ(Collaborator)が複数いるとかなり良いです。マージしているコミッターが複数いるかどうかをコミット履歴から追ってみるとわかります。</p>

<h2>Issueがラベルなどで管理されている</h2>

<p>有名どころのプロジェクトはリソースがないから対応していないIssueが結構あります。新参者がいきなりそういうIssueに対してpull requestを送るのは怖いと感じるはずです。(pull request投げるのに慣れると特段気にならなくなりますが。。。)</p>

<p>Issueが整理されているプロジェクトでは、誰がコントリビュートしてもいいよ！というラベルが貼ってある場合があります。例えば、自分がちょくちょくコントリビュートしている、<a href="https://github.com/excilys/androidannotations/">AndroidAnnotations</a>では<a href="https://github.com/excilys/androidannotations/labels/ContributionWelcome">ContributionWelcome</a>がそれに当たります。
こういうラベルがあれば、いつでもバッチコイやと宣言しているので、新参者だろうと特に気にせず、pull request投げてしまいます。大抵の場合、何をするべきかということがしっかりIssueに記載されていますので、その通りに実装すれば良いだけです。</p>

<p>ラベルが管理されていないところでも、Issueにこれやってもいいかね？というコメントをしてしまうのもありです。マージしている人が上げているようなIssueは特に狙い目で質問もしやすく、レスポンスも早いです。</p>

<h2>放置されているpull requestが少ない</h2>

<p>一ヶ月以上前に上げられたpull requestが10件以上放置されているようなプロジェクトは危険です。</p>

<p>大抵、pull requestはマージしてほしいから出しているわけで、コントリビューター側の問題で放置されるというのは稀です。プロジェクトオーナーがレビューしてくれない、マージする気がない、忙しいことが多く、そういうプロジェクトにpull requestを投げても放置されるだけで勉強出来ません。時間の無駄です。</p>

<h2>GitHubで完結している</h2>

<p>GitHub内で完結していないプロジェクトは避けます。Issueが別サイトであったり、sourceがcloneで一発取得できなかったりするものです。そのプロジェクト特有のローカルルールはラーニングコストが高いわりに学んでもそのプロジェクトでしか使えないためです。</p>

<p>どうしてもそのプロジェクトのコントリビュートがしたい！という人であれば、全力で推奨しますが、そういうプロジェクトは新参者に対しかなり壁が高く、最初からそういうのを狙ってしまうと続けられなくなります。</p>

<h2>使ったことあるなしは気にしない</h2>

<p>ビルドやテストが通る環境が出来てしまえさえすれば、そのプロジェクトを使ったことあるなしは特に問題ありません。</p>

<p>自分の場合、今直近で出しているpull requestは全て使ったことがないプロジェクトだったりします。
(ぶっちゃけると使ったことがないほうがマージされて壊れちゃっても業務に支障出ないし、気楽だったりします。)</p>

<h1>必要なスキル</h1>

<p>プルリク駆動勉強で必要なスキルは以下です。</p>

<ul>
<li>gitの基礎やfork->commit->pull requestまでが出来る</li>
<li>コードレビューでも折れない心</li>
<li>自分のスキルではまだ出来ないと思わないこと</li>
</ul>


<h2>gitの基礎やfork->commit->pull requestまでが出来る</h2>

<p>pull requestを投げるまでの流れはググればすぐ出てくるので、説明省略。</p>

<p>それ以外でもgit/githubの問題はやっているとちょくちょく出てきますが、都度やりたいことをググれば出てきます。勉強して下さい。どうしてもわからない場合は直接聞いてしまってもいいです。</p>

<p>fork元のブランチとの同期方法が最初の壁だと思います。面倒であれば、forkしたリポジトリを消して再度forkして同期を取るのもありです。
(ただし、マージ前のpull requestがあったりすると面倒なので、注意。)
これも勉強だと思って、わからないのであればググッてみて下さい。「fork 更新 追随」とかで検索すれば出てきます。</p>

<h2>コードレビューでも折れない心</h2>

<p>特に経験の少ない人や潰れていった人に多いのがコードレビューの指摘点がその人に対して言っているのでは？と勘違いしていることです。</p>

<p><strong>コードレビューはコードに対して言っているのであって、そのコードを書いた人に対しては言っていないです。</strong></p>

<p>この考えになってない人は早めに切り替えないと精神的に病みやすいので気をつけて下さい。
辛辣な意見があるかもしれませんが、あなたを否定しているわけではないです。
(逆にコードを書いた人を否定するような意見をするレビュアーがいる場合、さっさとそのプロジェクトから離れるなり、転職するなりしたほうがいいです。そういう人と一緒にコード書いても精神的に疲れるだけです。)</p>

<h2>自分のスキルではまだ出来ないと思わないこと</h2>

<p>プルリク駆動勉強で一番問題なのが、「自分のスキルではまだ出来ない」と思う心の壁です。</p>

<p>どれほどしょぼいコードでもpull requestを投げることで、そのプロジェクトに関わっている人に指摘してもらい、コードをどう書けばいいのかがわかってきます。</p>

<p>自分の場合、一度も書いたことなかった言語を触りたいからということで、コード読んでpull request投げたこともあります。</p>

<p>最終的に良いアウトプットになればいいわけで、最初から完璧を目指す必要がないです。また最初からほぼ完璧なコードが作れるのであれば、プルリク駆動勉強はもう卒業しています。</p>

<p>会社でのプログラミングは社内の特殊なルールがあったりし、社外で通じないことが多々あります。有名どころのプロジェクトではベストプラクティスを求められるため、じっくり設計し、自分が考えたさいきょうのコードを作り上げることが出来ます。どんなことでもコントリビュートしてくれたことに感謝してくれるプロジェクトが多いです。無料で世界レベルのエンジニアに教えてもらい、さらに感謝までしてもらえます。そのコードがマージまでされれば、世界で使われるような有名なプロジェクトが自分のコードで動くことになります！</p>

<h1>個人的な成果</h1>

<p>まだ3ヶ月ほどですが、これをやるようになって、Java8, Groovy/Gradle, Kotlinの勉強が出来ました。Rubyや英語のスキルも上がったことを実感しています。</p>

<p>また、gitの知識もかなり深まりました。他人の途中のpull requestを自分のpull requestとして取り込み、修正し、投げるみたいな貴重な経験も出来ました。小さいアイコンと大きいアイコンが一度に出るような<a href="https://github.com/excilys/androidannotations/pull/1603/commits">コミット</a>見たことありますか？</p>

<h1>気をつけること</h1>

<p>時間をかければかけるだけ勉強は出来ますが、業務に支障が出たり、最悪体を壊してしまいます。</p>

<p>以前はブログを書いたり、本を読んだりと夜遅くまでダラダラをやっていました。でもいまいち成果が出なかったです。今は短い時間で集中して結果を出していくことを心がけています。夜12時には寝ます。お昼休みの食後30分と子供が寝た後の1時間だけやっています。無理は絶対にしません。だって、納期はありませんから。</p>

<p>一日多くの時間がないので、毎日コミットは出来ません。Issueやコードを読むだけで過ぎてしまう日もあります。でも週1くらいのペースでpull requestを投げられています。</p>

<p>スケジューリングに時間を使うのも無駄なので、一個終わったら次のIssueへという流れにしています。</p>

<h1>pull requestが怖い人へ</h1>

<p>そんなこといってもお前スキルあるからやれるんでしょ？みたいな人がいるかと思うので、実際に自分がつい最近送ったくそpull requestを晒しておきます。</p>

<p><a href="https://github.com/excilys/androidannotations/pull/1673">https://github.com/excilys/androidannotations/pull/1673</a></p>

<p>すでに指摘を受けて修正していますが、最初のpull requestを投げたタイミングで、「It&rsquo;s ready for review.」(ﾄﾞﾔｱ)と言っておきながら、
<a href="https://github.com/excilys/androidannotations/pull/1673#discussion_r48849275">AndroidManifest.xmlのActivityタグにViewクラスを指定する</a>という意味不明な行動をしていたり、<a href="https://github.com/excilys/androidannotations/pull/1673#discussion-diff-49131871">newInsanceVarというtypoをかましていたり</a>といろいろひどいです。それでも罵られたりすることはないです。(いい加減罵られたほうがいいんじゃねーか？というレベルなのですが・・・)</p>

<h1>最後に</h1>

<p>この勉強法を使って経験が浅い若手や学生がどんどん世界で腕を磨いてくれたらと思います。特に時間のある人は積極的にコードを公開し、レビューを受けて腕を磨いて下さい。早ければ早いほど学べることが多いと思います。</p>

<p>自分もスキルに自信がついたら・・・とGitHubでpull requestをほとんど送ってこなかったのですが、そんな自信はやらない限り絶対につかないです。どんどん他人のプロジェクトで失敗して、腕を磨いて下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[リファクタリングについて伝えたいこと。]]></title>
    <link href="http://shiraji.github.io/blog/2015/10/17/refactoring/"/>
    <updated>2015-10-17T11:39:09+09:00</updated>
    <id>http://shiraji.github.io/blog/2015/10/17/refactoring</id>
    <content type="html"><![CDATA[<p>この文章は以下のURLのコピーです。</p>

<p><a href="http://shiraji.hatenablog.com/entry/2015/09/06/225204">http://shiraji.hatenablog.com/entry/2015/09/06/225204</a></p>

<hr />

<p>この文章は以下に該当する方へ、なぜエンジニアにリファクタリング(リファクタ)させるべきなのかを記載しています。</p>

<ul>
<li>リファクタリングする＝サービスの開発が停止すると考えている方</li>
<li>リファクタリングに関して価値を見出せない方</li>
<li>エンジニアにリファクタリングさせて欲しいと言われる方</li>
</ul>


<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h1>最初に</h1>

<p>リファクタリングの話をする前に、一般的な職場に関する質問があります。</p>

<ul>
<li>あなたの職場は綺麗ですか？</li>
<li>あなたが思い浮かべる「できる同僚・上司」の机は整理整頓されていますか？</li>
</ul>


<p>全ての人に当てはまるわけではないと思います。しかし大抵の方は両方回答がYesになると思います。</p>

<p>職場を綺麗にするのはそこで働く人の健康維持やモチベーション向上に役立ちます。職場を綺麗にしてくれる専門のスタッフがいる企業もあるのではないでしょうか？また整理整頓された机で仕事することにより、ムダを省略することが出来ます。仕事をするスペースが増えることにより効率もあがります。大抵の出来る人は机を整理整頓している傾向があるそうです。著名な会社の研修でも同じようなことを説いていました。</p>

<p>汚い環境で働くということは、モチベーションを下げ、ムダな作業を発生させ、効率を下げるということです。汚い環境で働くのは非常に辛く、可能であれば、人はその環境から離れていきます。</p>

<h1>リファクタリングとは何か？</h1>

<p>さて、本題のリファクタリングについてです。wikipediaでは以下のように説明されています。</p>

<blockquote><p>リファクタリング (refactoring) とはコンピュータプログラミングにおいて、プログラムの外部から見た動作を変えずにソースコードの内部構造を整理すること。((&ldquo;リファクタリング (プログラミング)&rdquo;. wikipedia. <a href="https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0_">https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0_</a>(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0))</p></blockquote>

<p>もう少しサービス開発に絡めて切り込んだ説明にすると、</p>

<p>「リファクタリングするということは、サービスの機能の追加や削除は一切行わず、コストをかけて、今まで動いていたコードに対して修正を加える作業です。」</p>

<p>リファクタリングをすることにより、バグを埋め込んでサービスを止めてしまう可能性も含まれることになります。もちろんそれを避ける術はいくつかあるのですが、手段はエンジニアが考えればいいのでここでは省略させていただきます。</p>

<h1>リファクタリングをなぜやるのか？</h1>

<p>なぜこんなムダな作業を行うのでしょうか？エンジニアはアホなんでしょうか？</p>

<h3>エンジニアはコード上で仕事をしている</h3>

<p>（実際、アホなことやる人は多いですが・・・）事自分たちが行っているサービス開発に関して言えば、プライドを持って行っているはずです。サービスに携わっている以上、そのサービスがより良くなることを望んで開発しています。そのエンジニアがコストがかかることを承知で、リファクタリングさせて欲しいという理由があります。それはエンジニアは<b>コード上で仕事をしている</b>ということです。</p>

<h3>デスクの綺麗さとコードの綺麗さ</h3>

<p>私が非エンジニアにリファクタリングの重要性を説明する時は以下のように説明します。</p>

<ul>
<li>デスクに毎日のようにいろんな人が資料を置いていくとします。</li>
<li>資料を置くことを目的にする社員もいるので、資料はあなたが意図した場所には置かれません。</li>
<li>デスクがどんどん汚くなっていき、必要な資料を探すのに苦労します。</li>
<li>間違った資料を使って仕事をする可能性も出てきます。</li>
<li>このような状況になった場合、あなたがまず最初に行うのが、整理整頓だと思います。</li>
</ul>


<p>ではエンジニアはコード上で仕事をしているということなので、デスクを「コード」、置かれていく資料を「追加機能」と読み替えてみます。</p>

<ul>
<li>コードに毎日のようにいろんな人が機能を追加していきます。</li>
<li>機能追加を目的にする社員もいるので、エンジニアが意図した場所に機能が追加されません。</li>
<li>コードがどんどん汚くなっていき、必要な機能を調査するのに苦労します。</li>
<li>間違った機能を使って仕事をする可能性も出てきます。(=バグを作り出す)</li>
<li>このような状況になった場合、エンジニアがまず最初に行うのが、整理整頓(=リファクタリング)だと思います。</li>
</ul>


<p>エンジニアが作業しているコードを綺麗にすることにより、将来的にバグを作り出さなかったり、効率良く作業が出来る環境を作ることが出来ます。</p>

<h3>エンジニアを惹きつける、引き止めるためのリファクタリング</h3>

<p>汚い環境で働くということは、モチベーションを下げ、ムダな作業を発生させ、効率を下げるということです。汚い環境で働くのは非常に辛く、可能であれば、人はその環境から離れていきます。</p>

<p>この文章も同じように読み替えることが出来ます。</p>

<p>汚いコード上で働くということは、モチベーションを下げ、ムダな作業を発生させ、効率を下げるということです。汚いコード上で働くのは非常に辛く、可能であれば、エンジニアはそのコード（会社）から離れていきます。</p>

<p>エンジニアが働く場所の環境を良くすることとそのエンジニアを魅了するためにリファクタリングをさせる猶予を与えてあげてください。この魅力的な余裕があることでエンジニアとしてやる気が向上し、整理されたコードで仕事が出来るためパフォーマンスが上がります。働きやすい職場(コード)で最高のパフォーマンスを出すことが出来るのであれば、エンジニアが離職するのを引き止めるのに役立つはずです。</p>

<h1>まとめ</h1>

<p>汚い場所で人を働かせることが辛いということがわかるのであるなら、ぜひ汚い環境で働かされているエンジニアに掃除をする猶予を与えてあげてください。それが長期的に見るとサービスを改善を早くし、技術力のあるエンジニアを定着させ、変化に柔軟なサービスを提供させることが出来るようになるからです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己紹介]]></title>
    <link href="http://shiraji.github.io/blog/2015/10/17/intro/"/>
    <updated>2015-10-17T07:31:51+09:00</updated>
    <id>http://shiraji.github.io/blog/2015/10/17/intro</id>
    <content type="html"><![CDATA[<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 728x90 -->


<p><ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-3940616565912592"
     data-ad-slot="7693358062"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>shirajiと申します。GitHub活動は英語で行っていますが、このブログは日本語で記載していきたいと思います。</p>

<ul>
<li>Twitter: <a href="https://twitter.com/shiraj_i">@shiraj_i</a></li>
<li>Qiita: <a href="http://qiita.com/shiraji">shiraji</a></li>
</ul>


<p>よろしくお願いいたします。</p>
]]></content>
  </entry>
  
</feed>
